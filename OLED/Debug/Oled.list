
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014dc  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c68  08008c68  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08008c68  08008c68  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c68  08008c68  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c68  08008c68  00018c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c6c  08008c6c  00018c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f20  20000068  08008cd8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f88  08008cd8  00021f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001497d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003451  00000000  00000000  00034a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00037eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4f  00000000  00000000  00039180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004345  00000000  00000000  00039fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d39  00000000  00000000  0003e314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0802  00000000  00000000  0005404d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051d4  00000000  00000000  00144850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00149a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007774 	.word	0x08007774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007774 	.word	0x08007774

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <readPC13State>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

GPIO_PinState readPC13State() {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, LEFT_BUTTON_PIN);
 8000274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000278:	4802      	ldr	r0, [pc, #8]	; (8000284 <readPC13State+0x14>)
 800027a:	f001 faf1 	bl	8001860 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
}
 8000280:	4618      	mov	r0, r3
 8000282:	bd80      	pop	{r7, pc}
 8000284:	48000800 	.word	0x48000800

08000288 <readPC4State>:

GPIO_PinState readPC4State() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, RIGHT_BUTTON_PIN);
 800028c:	2110      	movs	r1, #16
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <readPC4State+0x14>)
 8000290:	f001 fae6 	bl	8001860 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
}
 8000296:	4618      	mov	r0, r3
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	48000800 	.word	0x48000800

080002a0 <readPC5State>:

GPIO_PinState readPC5State() {  // New function implementation
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, WAKEUP_BUTTON_PIN);
 80002a4:	2120      	movs	r1, #32
 80002a6:	4803      	ldr	r0, [pc, #12]	; (80002b4 <readPC5State+0x14>)
 80002a8:	f001 fada 	bl	8001860 <HAL_GPIO_ReadPin>
 80002ac:	4603      	mov	r3, r0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	48000800 	.word	0x48000800

080002b8 <movePaddleLeft>:

bool movePaddleLeft(uint8_t *paddle_x) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    GPIO_PinState leftButtonState = readPC13State();
 80002c0:	f7ff ffd6 	bl	8000270 <readPC13State>
 80002c4:	4603      	mov	r3, r0
 80002c6:	73fb      	strb	r3, [r7, #15]
    if (leftButtonState == GPIO_PIN_SET && !wasLeftButtonPressed) {
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d115      	bne.n	80002fa <movePaddleLeft+0x42>
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <movePaddleLeft+0x58>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	f083 0301 	eor.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d00e      	beq.n	80002fa <movePaddleLeft+0x42>
        wasLeftButtonPressed = true;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <movePaddleLeft+0x58>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
        if (*paddle_x > 0) {
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d005      	beq.n	80002f6 <movePaddleLeft+0x3e>
            *paddle_x -= 2;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3b02      	subs	r3, #2
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	701a      	strb	r2, [r3, #0]
        }
        return true;
 80002f6:	2301      	movs	r3, #1
 80002f8:	e006      	b.n	8000308 <movePaddleLeft+0x50>
    }
    if (leftButtonState == GPIO_PIN_RESET) {
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d102      	bne.n	8000306 <movePaddleLeft+0x4e>
        wasLeftButtonPressed = false;
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <movePaddleLeft+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
    }
    return false;
 8000306:	2300      	movs	r3, #0
}
 8000308:	4618      	mov	r0, r3
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000124 	.word	0x20000124

08000314 <movePaddleRight>:

bool movePaddleRight(uint8_t *paddle_x, uint8_t paddle_width) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
    GPIO_PinState rightButtonState = readPC4State();
 8000320:	f7ff ffb2 	bl	8000288 <readPC4State>
 8000324:	4603      	mov	r3, r0
 8000326:	73fb      	strb	r3, [r7, #15]
    if (rightButtonState == GPIO_PIN_SET && !wasRightButtonPressed) {
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d118      	bne.n	8000360 <movePaddleRight+0x4c>
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <movePaddleRight+0x64>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	f083 0301 	eor.w	r3, r3, #1
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2b00      	cmp	r3, #0
 800033a:	d011      	beq.n	8000360 <movePaddleRight+0x4c>
        wasRightButtonPressed = true;
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <movePaddleRight+0x64>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
        if (*paddle_x + paddle_width < SSD1306_WIDTH) {
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	461a      	mov	r2, r3
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	4413      	add	r3, r2
 800034c:	2b7f      	cmp	r3, #127	; 0x7f
 800034e:	dc05      	bgt.n	800035c <movePaddleRight+0x48>
            *paddle_x += 2;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	3302      	adds	r3, #2
 8000356:	b2da      	uxtb	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	701a      	strb	r2, [r3, #0]
        }
        return true;
 800035c:	2301      	movs	r3, #1
 800035e:	e006      	b.n	800036e <movePaddleRight+0x5a>
    }
    if (rightButtonState == GPIO_PIN_RESET) {
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d102      	bne.n	800036c <movePaddleRight+0x58>
        wasRightButtonPressed = false;
 8000366:	4b04      	ldr	r3, [pc, #16]	; (8000378 <movePaddleRight+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
    }
    return false;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000125 	.word	0x20000125

0800037c <StartGameTask>:

void StartGameTask(void *argument) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
    while (1) {
        if (!game_over) {
 8000384:	4b38      	ldr	r3, [pc, #224]	; (8000468 <StartGameTask+0xec>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	f083 0301 	eor.w	r3, r3, #1
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d065      	beq.n	800045e <StartGameTask+0xe2>
            ball_x += ball_vx;
 8000392:	4b36      	ldr	r3, [pc, #216]	; (800046c <StartGameTask+0xf0>)
 8000394:	781a      	ldrb	r2, [r3, #0]
 8000396:	4b36      	ldr	r3, [pc, #216]	; (8000470 <StartGameTask+0xf4>)
 8000398:	f993 3000 	ldrsb.w	r3, [r3]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4413      	add	r3, r2
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b32      	ldr	r3, [pc, #200]	; (800046c <StartGameTask+0xf0>)
 80003a4:	701a      	strb	r2, [r3, #0]
            ball_y += ball_vy;
 80003a6:	4b33      	ldr	r3, [pc, #204]	; (8000474 <StartGameTask+0xf8>)
 80003a8:	781a      	ldrb	r2, [r3, #0]
 80003aa:	4b33      	ldr	r3, [pc, #204]	; (8000478 <StartGameTask+0xfc>)
 80003ac:	f993 3000 	ldrsb.w	r3, [r3]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	4413      	add	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <StartGameTask+0xf8>)
 80003b8:	701a      	strb	r2, [r3, #0]

            if (ball_y <= game_area_top) {
 80003ba:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <StartGameTask+0xf8>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2212      	movs	r2, #18
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d808      	bhi.n	80003d6 <StartGameTask+0x5a>
                ball_vy = -ball_vy;
 80003c4:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <StartGameTask+0xfc>)
 80003c6:	f993 3000 	ldrsb.w	r3, [r3]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	425b      	negs	r3, r3
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	b25a      	sxtb	r2, r3
 80003d2:	4b29      	ldr	r3, [pc, #164]	; (8000478 <StartGameTask+0xfc>)
 80003d4:	701a      	strb	r2, [r3, #0]
            }

            if (ball_x <= 0 || ball_x >= SSD1306_WIDTH - BALL_SIZE) {
 80003d6:	4b25      	ldr	r3, [pc, #148]	; (800046c <StartGameTask+0xf0>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d003      	beq.n	80003e6 <StartGameTask+0x6a>
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <StartGameTask+0xf0>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b7b      	cmp	r3, #123	; 0x7b
 80003e4:	d908      	bls.n	80003f8 <StartGameTask+0x7c>
                ball_vx = -ball_vx;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <StartGameTask+0xf4>)
 80003e8:	f993 3000 	ldrsb.w	r3, [r3]
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	425b      	negs	r3, r3
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	b25a      	sxtb	r2, r3
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <StartGameTask+0xf4>)
 80003f6:	701a      	strb	r2, [r3, #0]
            }

            if (ball_y + BALL_SIZE >= paddle_y && ball_x + BALL_SIZE >= paddle_x && ball_x <= paddle_x + PADDLE_WIDTH) {
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <StartGameTask+0xf8>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	3304      	adds	r3, #4
 80003fe:	223a      	movs	r2, #58	; 0x3a
 8000400:	4293      	cmp	r3, r2
 8000402:	db1c      	blt.n	800043e <StartGameTask+0xc2>
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <StartGameTask+0xf0>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	3304      	adds	r3, #4
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <StartGameTask+0x100>)
 800040c:	7812      	ldrb	r2, [r2, #0]
 800040e:	4293      	cmp	r3, r2
 8000410:	db15      	blt.n	800043e <StartGameTask+0xc2>
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <StartGameTask+0xf0>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	461a      	mov	r2, r3
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <StartGameTask+0x100>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3328      	adds	r3, #40	; 0x28
 800041e:	429a      	cmp	r2, r3
 8000420:	dc0d      	bgt.n	800043e <StartGameTask+0xc2>
                ball_vy = -ball_vy;
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <StartGameTask+0xfc>)
 8000424:	f993 3000 	ldrsb.w	r3, [r3]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	425b      	negs	r3, r3
 800042c:	b2db      	uxtb	r3, r3
 800042e:	b25a      	sxtb	r2, r3
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <StartGameTask+0xfc>)
 8000432:	701a      	strb	r2, [r3, #0]
                score++;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <StartGameTask+0x104>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3301      	adds	r3, #1
 800043a:	4a11      	ldr	r2, [pc, #68]	; (8000480 <StartGameTask+0x104>)
 800043c:	6013      	str	r3, [r2, #0]
            }

            if (ball_y >= SSD1306_HEIGHT - BALL_SIZE - PADDLE_HEIGHT) {
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <StartGameTask+0xf8>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b37      	cmp	r3, #55	; 0x37
 8000444:	d907      	bls.n	8000456 <StartGameTask+0xda>
                game_over = true;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <StartGameTask+0xec>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
                osSemaphoreRelease(gameOverSemaphore);
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <StartGameTask+0x108>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4618      	mov	r0, r3
 8000452:	f003 fc2f 	bl	8003cb4 <osSemaphoreRelease>
            }

            osDelay(60);
 8000456:	203c      	movs	r0, #60	; 0x3c
 8000458:	f003 fb36 	bl	8003ac8 <osDelay>
 800045c:	e792      	b.n	8000384 <StartGameTask+0x8>
        } else {
            osDelay(200);
 800045e:	20c8      	movs	r0, #200	; 0xc8
 8000460:	f003 fb32 	bl	8003ac8 <osDelay>
        if (!game_over) {
 8000464:	e78e      	b.n	8000384 <StartGameTask+0x8>
 8000466:	bf00      	nop
 8000468:	20000000 	.word	0x20000000
 800046c:	20000002 	.word	0x20000002
 8000470:	20000004 	.word	0x20000004
 8000474:	20000003 	.word	0x20000003
 8000478:	20000005 	.word	0x20000005
 800047c:	20000006 	.word	0x20000006
 8000480:	2000011c 	.word	0x2000011c
 8000484:	200000e8 	.word	0x200000e8

08000488 <StartPaddleTask>:
        }
    }
}

void StartPaddleTask(void *argument) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
    while (1) {
        if (!game_over) {
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <StartPaddleTask+0x2c>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	f083 0301 	eor.w	r3, r3, #1
 8000498:	b2db      	uxtb	r3, r3
 800049a:	2b00      	cmp	r3, #0
 800049c:	d006      	beq.n	80004ac <StartPaddleTask+0x24>
            if (movePaddleLeft(&paddle_x)) {}
 800049e:	4806      	ldr	r0, [pc, #24]	; (80004b8 <StartPaddleTask+0x30>)
 80004a0:	f7ff ff0a 	bl	80002b8 <movePaddleLeft>
            if (movePaddleRight(&paddle_x, PADDLE_WIDTH)) {}
 80004a4:	2128      	movs	r1, #40	; 0x28
 80004a6:	4804      	ldr	r0, [pc, #16]	; (80004b8 <StartPaddleTask+0x30>)
 80004a8:	f7ff ff34 	bl	8000314 <movePaddleRight>
        }
        osDelay(50);
 80004ac:	2032      	movs	r0, #50	; 0x32
 80004ae:	f003 fb0b 	bl	8003ac8 <osDelay>
        if (!game_over) {
 80004b2:	e7ed      	b.n	8000490 <StartPaddleTask+0x8>
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000006 	.word	0x20000006

080004bc <StartDisplayTask>:
    }
}


void StartDisplayTask(void *argument) {
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
    while (1) {
        if (!game_over) {
 80004c4:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <StartDisplayTask+0xc4>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	f083 0301 	eor.w	r3, r3, #1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d051      	beq.n	8000576 <StartDisplayTask+0xba>
            ssd1306_Fill(Black);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 fb4c 	bl	8000b70 <ssd1306_Fill>

            ssd1306_FillRectangle(ball_x, ball_y, ball_x + BALL_SIZE, ball_y + BALL_SIZE, White);
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <StartDisplayTask+0xc8>)
 80004da:	7818      	ldrb	r0, [r3, #0]
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <StartDisplayTask+0xcc>)
 80004de:	7819      	ldrb	r1, [r3, #0]
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <StartDisplayTask+0xc8>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	3304      	adds	r3, #4
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <StartDisplayTask+0xcc>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3304      	adds	r3, #4
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2401      	movs	r4, #1
 80004f2:	9400      	str	r4, [sp, #0]
 80004f4:	f000 fca0 	bl	8000e38 <ssd1306_FillRectangle>
            ssd1306_FillRectangle(paddle_x, paddle_y, paddle_x + PADDLE_WIDTH, paddle_y + PADDLE_HEIGHT, White);
 80004f8:	4b24      	ldr	r3, [pc, #144]	; (800058c <StartDisplayTask+0xd0>)
 80004fa:	7818      	ldrb	r0, [r3, #0]
 80004fc:	243a      	movs	r4, #58	; 0x3a
 80004fe:	4b23      	ldr	r3, [pc, #140]	; (800058c <StartDisplayTask+0xd0>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	3328      	adds	r3, #40	; 0x28
 8000504:	b2da      	uxtb	r2, r3
 8000506:	233a      	movs	r3, #58	; 0x3a
 8000508:	3304      	adds	r3, #4
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2101      	movs	r1, #1
 800050e:	9100      	str	r1, [sp, #0]
 8000510:	4621      	mov	r1, r4
 8000512:	f000 fc91 	bl	8000e38 <ssd1306_FillRectangle>

            if (score > highscore) {
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <StartDisplayTask+0xd4>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <StartDisplayTask+0xd8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	429a      	cmp	r2, r3
 8000520:	dd03      	ble.n	800052a <StartDisplayTask+0x6e>
                        highscore = score;
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <StartDisplayTask+0xd4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <StartDisplayTask+0xd8>)
 8000528:	6013      	str	r3, [r2, #0]
                    }
            sprintf(score_str, "Score: %d", score);
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <StartDisplayTask+0xd4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	4919      	ldr	r1, [pc, #100]	; (8000598 <StartDisplayTask+0xdc>)
 8000532:	481a      	ldr	r0, [pc, #104]	; (800059c <StartDisplayTask+0xe0>)
 8000534:	f006 fc7a 	bl	8006e2c <siprintf>
            ssd1306_SetCursor(0, 0);
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fc64 	bl	8000e08 <ssd1306_SetCursor>
            ssd1306_WriteString(score_str, Font_6x8, White);
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <StartDisplayTask+0xe4>)
 8000542:	2201      	movs	r2, #1
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000548:	4814      	ldr	r0, [pc, #80]	; (800059c <StartDisplayTask+0xe0>)
 800054a:	f000 fc37 	bl	8000dbc <ssd1306_WriteString>

            sprintf(highscore_str, "Highscore: %d", highscore);
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <StartDisplayTask+0xd8>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	4913      	ldr	r1, [pc, #76]	; (80005a4 <StartDisplayTask+0xe8>)
 8000556:	4814      	ldr	r0, [pc, #80]	; (80005a8 <StartDisplayTask+0xec>)
 8000558:	f006 fc68 	bl	8006e2c <siprintf>
            ssd1306_SetCursor(0, 8);
 800055c:	2108      	movs	r1, #8
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fc52 	bl	8000e08 <ssd1306_SetCursor>
            ssd1306_WriteString(highscore_str, Font_6x8, White);
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <StartDisplayTask+0xe4>)
 8000566:	2201      	movs	r2, #1
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <StartDisplayTask+0xec>)
 800056e:	f000 fc25 	bl	8000dbc <ssd1306_WriteString>

            ssd1306_UpdateScreen();
 8000572:	f000 fb15 	bl	8000ba0 <ssd1306_UpdateScreen>
        }

        osDelay(100);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f003 faa6 	bl	8003ac8 <osDelay>
        if (!game_over) {
 800057c:	e7a2      	b.n	80004c4 <StartDisplayTask+0x8>
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000
 8000584:	20000002 	.word	0x20000002
 8000588:	20000003 	.word	0x20000003
 800058c:	20000006 	.word	0x20000006
 8000590:	2000011c 	.word	0x2000011c
 8000594:	20000120 	.word	0x20000120
 8000598:	080077c0 	.word	0x080077c0
 800059c:	200000ec 	.word	0x200000ec
 80005a0:	08008bdc 	.word	0x08008bdc
 80005a4:	080077cc 	.word	0x080077cc
 80005a8:	20000100 	.word	0x20000100

080005ac <StartGameOverTask>:
    }
}

void StartGameOverTask(void *argument) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
    while (1) {
        osSemaphoreAcquire(gameOverSemaphore, osWaitForever);
 80005b4:	4b4f      	ldr	r3, [pc, #316]	; (80006f4 <StartGameOverTask+0x148>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f04f 31ff 	mov.w	r1, #4294967295
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fb27 	bl	8003c10 <osSemaphoreAcquire>
        if (!first_play && game_over) {
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <StartGameOverTask+0x14c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	f083 0301 	eor.w	r3, r3, #1
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d03d      	beq.n	800064c <StartGameOverTask+0xa0>
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <StartGameOverTask+0x150>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d039      	beq.n	800064c <StartGameOverTask+0xa0>
                    // Display "Game Over" screen only after the first play
        	ssd1306_Fill(Black); // Set OLED display to black
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fac9 	bl	8000b70 <ssd1306_Fill>
        	ssd1306_UpdateScreen();
 80005de:	f000 fadf 	bl	8000ba0 <ssd1306_UpdateScreen>
            ssd1306_SetCursor(10, SSD1306_HEIGHT / 2 - 20);
 80005e2:	210c      	movs	r1, #12
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fc0f 	bl	8000e08 <ssd1306_SetCursor>
            ssd1306_WriteString("Game Over", Font_11x18, White);
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <StartGameOverTask+0x154>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f2:	4844      	ldr	r0, [pc, #272]	; (8000704 <StartGameOverTask+0x158>)
 80005f4:	f000 fbe2 	bl	8000dbc <ssd1306_WriteString>
            ssd1306_SetCursor(10, SSD1306_HEIGHT / 2);
 80005f8:	2120      	movs	r1, #32
 80005fa:	200a      	movs	r0, #10
 80005fc:	f000 fc04 	bl	8000e08 <ssd1306_SetCursor>
            ssd1306_WriteString(score_str, Font_6x8, White);
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <StartGameOverTask+0x15c>)
 8000602:	2201      	movs	r2, #1
 8000604:	9200      	str	r2, [sp, #0]
 8000606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000608:	4840      	ldr	r0, [pc, #256]	; (800070c <StartGameOverTask+0x160>)
 800060a:	f000 fbd7 	bl	8000dbc <ssd1306_WriteString>
            ssd1306_SetCursor(10, SSD1306_HEIGHT / 2 + 20);
 800060e:	2134      	movs	r1, #52	; 0x34
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fbf9 	bl	8000e08 <ssd1306_SetCursor>
            ssd1306_WriteString(highscore_str, Font_6x8, White);
 8000616:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <StartGameOverTask+0x15c>)
 8000618:	2201      	movs	r2, #1
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800061e:	483c      	ldr	r0, [pc, #240]	; (8000710 <StartGameOverTask+0x164>)
 8000620:	f000 fbcc 	bl	8000dbc <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000624:	f000 fabc 	bl	8000ba0 <ssd1306_UpdateScreen>
            HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2108      	movs	r1, #8
 800062c:	4839      	ldr	r0, [pc, #228]	; (8000714 <StartGameOverTask+0x168>)
 800062e:	f001 f92f 	bl	8001890 <HAL_GPIO_WritePin>
            HAL_Delay(2000);
 8000632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000636:	f000 fe3f 	bl	80012b8 <HAL_Delay>
                     // Buzzer Off
            HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	4835      	ldr	r0, [pc, #212]	; (8000714 <StartGameOverTask+0x168>)
 8000640:	f001 f926 	bl	8001890 <HAL_GPIO_WritePin>
            HAL_Delay(2000);
 8000644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000648:	f000 fe36 	bl	80012b8 <HAL_Delay>
        }
        if (game_over) {
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <StartGameOverTask+0x150>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00e      	beq.n	8000672 <StartGameOverTask+0xc6>
         ssd1306_Fill(Black); // Set OLED display to black
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fa8b 	bl	8000b70 <ssd1306_Fill>
         HAL_Delay(2000);
 800065a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800065e:	f000 fe2b 	bl	80012b8 <HAL_Delay>
         HAL_SuspendTick();
 8000662:	f000 fe4d 	bl	8001300 <HAL_SuspendTick>
         HAL_PWREx_EnableLowPowerRunMode();
 8000666:	f001 fe53 	bl	8002310 <HAL_PWREx_EnableLowPowerRunMode>
         HAL_ResumeTick();
 800066a:	f000 fe59 	bl	8001320 <HAL_ResumeTick>
         HAL_PWREx_DisableLowPowerRunMode();
 800066e:	f001 fe5f 	bl	8002330 <HAL_PWREx_DisableLowPowerRunMode>
         }
        ssd1306_Fill(Black);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 fa7c 	bl	8000b70 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000678:	f000 fa92 	bl	8000ba0 <ssd1306_UpdateScreen>


        while (readPC5State() == GPIO_PIN_RESET) {
 800067c:	e002      	b.n	8000684 <StartGameOverTask+0xd8>
            osDelay(50);  // Wait for PC5 button press to restart the game
 800067e:	2032      	movs	r0, #50	; 0x32
 8000680:	f003 fa22 	bl	8003ac8 <osDelay>
        while (readPC5State() == GPIO_PIN_RESET) {
 8000684:	f7ff fe0c 	bl	80002a0 <readPC5State>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f7      	beq.n	800067e <StartGameOverTask+0xd2>
        }
        if (game_over && HAL_GPIO_ReadPin(WAKEUP_GPIO_PORT, WAKEUP_BUTTON_PIN) == GPIO_PIN_SET){
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <StartGameOverTask+0x150>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d08e      	beq.n	80005b4 <StartGameOverTask+0x8>
 8000696:	2120      	movs	r1, #32
 8000698:	481e      	ldr	r0, [pc, #120]	; (8000714 <StartGameOverTask+0x168>)
 800069a:	f001 f8e1 	bl	8001860 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d187      	bne.n	80005b4 <StartGameOverTask+0x8>
        ball_x = SSD1306_WIDTH / 2;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <StartGameOverTask+0x16c>)
 80006a6:	2240      	movs	r2, #64	; 0x40
 80006a8:	701a      	strb	r2, [r3, #0]
        ball_y = (SSD1306_HEIGHT - game_area_top) / 2 + game_area_top;
 80006aa:	2312      	movs	r3, #18
 80006ac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80006b0:	0fda      	lsrs	r2, r3, #31
 80006b2:	4413      	add	r3, r2
 80006b4:	105b      	asrs	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2212      	movs	r2, #18
 80006ba:	4413      	add	r3, r2
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <StartGameOverTask+0x170>)
 80006c0:	701a      	strb	r2, [r3, #0]
        ball_vx = 1;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <StartGameOverTask+0x174>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
        ball_vy = 1;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <StartGameOverTask+0x178>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
        paddle_x = (SSD1306_WIDTH - PADDLE_WIDTH) / 2;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <StartGameOverTask+0x17c>)
 80006d0:	222c      	movs	r2, #44	; 0x2c
 80006d2:	701a      	strb	r2, [r3, #0]
        score = 0;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <StartGameOverTask+0x180>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
        game_over = false;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <StartGameOverTask+0x150>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
        first_play = false;  // Set first_play to false after the first game
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <StartGameOverTask+0x14c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
        ssd1306_Fill(Black);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fa42 	bl	8000b70 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 80006ec:	f000 fa58 	bl	8000ba0 <ssd1306_UpdateScreen>
        osSemaphoreAcquire(gameOverSemaphore, osWaitForever);
 80006f0:	e760      	b.n	80005b4 <StartGameOverTask+0x8>
 80006f2:	bf00      	nop
 80006f4:	200000e8 	.word	0x200000e8
 80006f8:	20000001 	.word	0x20000001
 80006fc:	20000000 	.word	0x20000000
 8000700:	08008be8 	.word	0x08008be8
 8000704:	080077dc 	.word	0x080077dc
 8000708:	08008bdc 	.word	0x08008bdc
 800070c:	200000ec 	.word	0x200000ec
 8000710:	20000100 	.word	0x20000100
 8000714:	48000800 	.word	0x48000800
 8000718:	20000002 	.word	0x20000002
 800071c:	20000003 	.word	0x20000003
 8000720:	20000004 	.word	0x20000004
 8000724:	20000005 	.word	0x20000005
 8000728:	20000006 	.word	0x20000006
 800072c:	2000011c 	.word	0x2000011c

08000730 <HAL_GPIO_EXTI_Callback>:
        }
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == WAKEUP_BUTTON_PIN) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	2b20      	cmp	r3, #32
 800073e:	d10b      	bne.n	8000758 <HAL_GPIO_EXTI_Callback+0x28>
        if (game_over) {
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <HAL_GPIO_EXTI_Callback+0x30>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d007      	beq.n	8000758 <HAL_GPIO_EXTI_Callback+0x28>
            game_over = false;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_GPIO_EXTI_Callback+0x30>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
            osSemaphoreRelease(gameOverSemaphore);
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_GPIO_EXTI_Callback+0x34>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f003 faae 	bl	8003cb4 <osSemaphoreRelease>
        }
    }
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	200000e8 	.word	0x200000e8

08000768 <main>:


/* USER CODE END 0 */

int main(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    HAL_Init();
 800076c:	f000 fd2f 	bl	80011ce <HAL_Init>
    SystemClock_Config();
 8000770:	f000 f84e 	bl	8000810 <SystemClock_Config>
    MX_GPIO_Init();
 8000774:	f000 f8de 	bl	8000934 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000778:	f000 f89c 	bl	80008b4 <MX_I2C1_Init>

    ssd1306_Init();
 800077c:	f000 f98e 	bl	8000a9c <ssd1306_Init>

    osKernelInitialize();
 8000780:	f003 f8c6 	bl	8003910 <osKernelInitialize>
    GameTaskHandle = osThreadNew(StartGameTask, NULL, &GameTask_attributes);
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <main+0x74>)
 8000786:	2100      	movs	r1, #0
 8000788:	4815      	ldr	r0, [pc, #84]	; (80007e0 <main+0x78>)
 800078a:	f003 f90b 	bl	80039a4 <osThreadNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <main+0x7c>)
 8000792:	6013      	str	r3, [r2, #0]
    PaddleTaskHandle = osThreadNew(StartPaddleTask, NULL, &PaddleTask_attributes);
 8000794:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <main+0x80>)
 8000796:	2100      	movs	r1, #0
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <main+0x84>)
 800079a:	f003 f903 	bl	80039a4 <osThreadNew>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <main+0x88>)
 80007a2:	6013      	str	r3, [r2, #0]
    DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <main+0x8c>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <main+0x90>)
 80007aa:	f003 f8fb 	bl	80039a4 <osThreadNew>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <main+0x94>)
 80007b2:	6013      	str	r3, [r2, #0]
    GameOverTaskHandle = osThreadNew(StartGameOverTask, NULL, &GameOverTask_attributes);
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <main+0x98>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4812      	ldr	r0, [pc, #72]	; (8000804 <main+0x9c>)
 80007ba:	f003 f8f3 	bl	80039a4 <osThreadNew>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <main+0xa0>)
 80007c2:	6013      	str	r3, [r2, #0]
    gameOverSemaphore = osSemaphoreNew(1, 1, NULL);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	2001      	movs	r0, #1
 80007ca:	f003 f998 	bl	8003afe <osSemaphoreNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a0e      	ldr	r2, [pc, #56]	; (800080c <main+0xa4>)
 80007d2:	6013      	str	r3, [r2, #0]

    osKernelStart();
 80007d4:	f003 f8c0 	bl	8003958 <osKernelStart>

    while (1) {
 80007d8:	e7fe      	b.n	80007d8 <main+0x70>
 80007da:	bf00      	nop
 80007dc:	08007800 	.word	0x08007800
 80007e0:	0800037d 	.word	0x0800037d
 80007e4:	200000d8 	.word	0x200000d8
 80007e8:	08007824 	.word	0x08007824
 80007ec:	08000489 	.word	0x08000489
 80007f0:	200000dc 	.word	0x200000dc
 80007f4:	08007848 	.word	0x08007848
 80007f8:	080004bd 	.word	0x080004bd
 80007fc:	200000e0 	.word	0x200000e0
 8000800:	0800786c 	.word	0x0800786c
 8000804:	080005ad 	.word	0x080005ad
 8000808:	200000e4 	.word	0x200000e4
 800080c:	200000e8 	.word	0x200000e8

08000810 <SystemClock_Config>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void SystemClock_Config(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b096      	sub	sp, #88	; 0x58
 8000814:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2244      	movs	r2, #68	; 0x44
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fb3e 	bl	8006ea0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000832:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000836:	f001 fd15 	bl	8002264 <HAL_PWREx_ControlVoltageScaling>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x34>
        Error_Handler();
 8000840:	f000 f8ee 	bl	8000a20 <Error_Handler>
    }

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000844:	2310      	movs	r3, #16
 8000846:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000850:	2360      	movs	r3, #96	; 0x60
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000858:	2301      	movs	r3, #1
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLN = 40;
 8000860:	2328      	movs	r3, #40	; 0x28
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000864:	2307      	movs	r3, #7
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fd93 	bl	80023a0 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x74>
        Error_Handler();
 8000880:	f000 f8ce 	bl	8000a20 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2303      	movs	r3, #3
 800088a:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  // Use the correct macro here
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  // Use the correct macro here
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000898:	463b      	mov	r3, r7
 800089a:	2104      	movs	r1, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f002 f95b 	bl	8002b58 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x9c>
        Error_Handler();
 80008a8:	f000 f8ba 	bl	8000a20 <Error_Handler>
    }
}
 80008ac:	bf00      	nop
 80008ae:	3758      	adds	r7, #88	; 0x58
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_I2C1_Init+0x74>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_I2C1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00702991;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_I2C1_Init+0x74>)
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <MX_I2C1_Init+0x7c>)
 80008c2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_I2C1_Init+0x74>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_I2C1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008ee:	480e      	ldr	r0, [pc, #56]	; (8000928 <MX_I2C1_Init+0x74>)
 80008f0:	f000 fffe 	bl	80018f0 <HAL_I2C_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x4a>
        Error_Handler();
 80008fa:	f000 f891 	bl	8000a20 <Error_Handler>
    }
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80008fe:	2100      	movs	r1, #0
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_I2C1_Init+0x74>)
 8000902:	f001 fc09 	bl	8002118 <HAL_I2CEx_ConfigAnalogFilter>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_I2C1_Init+0x5c>
        Error_Handler();
 800090c:	f000 f888 	bl	8000a20 <Error_Handler>
    }
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000910:	2100      	movs	r1, #0
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_I2C1_Init+0x74>)
 8000914:	f001 fc4b 	bl	80021ae <HAL_I2CEx_ConfigDigitalFilter>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2C1_Init+0x6e>
        Error_Handler();
 800091e:	f000 f87f 	bl	8000a20 <Error_Handler>
    }
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000084 	.word	0x20000084
 800092c:	40005400 	.word	0x40005400
 8000930:	00702991 	.word	0x00702991

08000934 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <MX_GPIO_Init+0xe0>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a31      	ldr	r2, [pc, #196]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a2b      	ldr	r2, [pc, #172]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0320 	and.w	r3, r3, #32
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_GPIO_Init+0xe0>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <MX_GPIO_Init+0xe0>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_GPIO_Init+0xe0>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b0:	4819      	ldr	r0, [pc, #100]	; (8000a18 <MX_GPIO_Init+0xe4>)
 80009b2:	f000 ff6d 	bl	8001890 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = LEFT_BUTTON_PIN | RIGHT_BUTTON_PIN | WAKEUP_BUTTON_PIN;  // Add WAKEUP_BUTTON_PIN
 80009b6:	f242 0330 	movw	r3, #8240	; 0x2030
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <MX_GPIO_Init+0xe8>)
 80009cc:	f000 fd9e 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PIN;
 80009d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0xe4>)
 80009ea:	f000 fd8f 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUZZER_PIN;
 80009ee:	2308      	movs	r3, #8
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000a06:	f000 fd81 	bl	800150c <HAL_GPIO_Init>

    // Set the buzzer pin low initially

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	48000800 	.word	0x48000800

08000a20 <Error_Handler>:


void Error_Handler(void) {
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
    __disable_irq();
    while (1) {
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>

08000a2a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af04      	add	r7, sp, #16
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	2200      	movs	r2, #0
 8000a54:	2178      	movs	r1, #120	; 0x78
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <ssd1306_WriteCommand+0x2c>)
 8000a58:	f000 ffe6 	bl	8001a28 <HAL_I2C_Mem_Write>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000084 	.word	0x20000084

08000a68 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7a:	9202      	str	r2, [sp, #8]
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2301      	movs	r3, #1
 8000a84:	2240      	movs	r2, #64	; 0x40
 8000a86:	2178      	movs	r1, #120	; 0x78
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <ssd1306_WriteData+0x30>)
 8000a8a:	f000 ffcd 	bl	8001a28 <HAL_I2C_Mem_Write>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000084 	.word	0x20000084

08000a9c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000aa0:	f7ff ffc3 	bl	8000a2a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	; 0x64
 8000aa6:	f000 fc07 	bl	80012b8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fa26 	bl	8000efc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ab0:	2020      	movs	r0, #32
 8000ab2:	f7ff ffc1 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff ffbe 	bl	8000a38 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000abc:	20b0      	movs	r0, #176	; 0xb0
 8000abe:	f7ff ffbb 	bl	8000a38 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ac2:	20c8      	movs	r0, #200	; 0xc8
 8000ac4:	f7ff ffb8 	bl	8000a38 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff ffb5 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ace:	2010      	movs	r0, #16
 8000ad0:	f7ff ffb2 	bl	8000a38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ad4:	2040      	movs	r0, #64	; 0x40
 8000ad6:	f7ff ffaf 	bl	8000a38 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	f000 f9fa 	bl	8000ed4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ae0:	20a1      	movs	r0, #161	; 0xa1
 8000ae2:	f7ff ffa9 	bl	8000a38 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000ae6:	20a6      	movs	r0, #166	; 0xa6
 8000ae8:	f7ff ffa6 	bl	8000a38 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000aec:	20a8      	movs	r0, #168	; 0xa8
 8000aee:	f7ff ffa3 	bl	8000a38 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000af2:	203f      	movs	r0, #63	; 0x3f
 8000af4:	f7ff ffa0 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000af8:	20a4      	movs	r0, #164	; 0xa4
 8000afa:	f7ff ff9d 	bl	8000a38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000afe:	20d3      	movs	r0, #211	; 0xd3
 8000b00:	f7ff ff9a 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff ff97 	bl	8000a38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b0a:	20d5      	movs	r0, #213	; 0xd5
 8000b0c:	f7ff ff94 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000b10:	20f0      	movs	r0, #240	; 0xf0
 8000b12:	f7ff ff91 	bl	8000a38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000b16:	20d9      	movs	r0, #217	; 0xd9
 8000b18:	f7ff ff8e 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000b1c:	2022      	movs	r0, #34	; 0x22
 8000b1e:	f7ff ff8b 	bl	8000a38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000b22:	20da      	movs	r0, #218	; 0xda
 8000b24:	f7ff ff88 	bl	8000a38 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000b28:	2012      	movs	r0, #18
 8000b2a:	f7ff ff85 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000b2e:	20db      	movs	r0, #219	; 0xdb
 8000b30:	f7ff ff82 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000b34:	2020      	movs	r0, #32
 8000b36:	f7ff ff7f 	bl	8000a38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000b3a:	208d      	movs	r0, #141	; 0x8d
 8000b3c:	f7ff ff7c 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000b40:	2014      	movs	r0, #20
 8000b42:	f7ff ff79 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 f9d8 	bl	8000efc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f80f 	bl	8000b70 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b52:	f000 f825 	bl	8000ba0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <ssd1306_Init+0xd0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <ssd1306_Init+0xd0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b62:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <ssd1306_Init+0xd0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	711a      	strb	r2, [r3, #4]
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000528 	.word	0x20000528

08000b70 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <ssd1306_Fill+0x14>
 8000b80:	2300      	movs	r3, #0
 8000b82:	e000      	b.n	8000b86 <ssd1306_Fill+0x16>
 8000b84:	23ff      	movs	r3, #255	; 0xff
 8000b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <ssd1306_Fill+0x2c>)
 8000b8e:	f006 f987 	bl	8006ea0 <memset>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000128 	.word	0x20000128

08000ba0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e016      	b.n	8000bda <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	3b50      	subs	r3, #80	; 0x50
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff40 	bl	8000a38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff ff3d 	bl	8000a38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f7ff ff3a 	bl	8000a38 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <ssd1306_UpdateScreen+0x4c>)
 8000bca:	4413      	add	r3, r2
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff4a 	bl	8000a68 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d9e5      	bls.n	8000bac <ssd1306_UpdateScreen+0xc>
    }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000128 	.word	0x20000128

08000bf0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db3d      	blt.n	8000c86 <ssd1306_DrawPixel+0x96>
 8000c0a:	79bb      	ldrb	r3, [r7, #6]
 8000c0c:	2b3f      	cmp	r3, #63	; 0x3f
 8000c0e:	d83a      	bhi.n	8000c86 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000c10:	797b      	ldrb	r3, [r7, #5]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d11a      	bne.n	8000c4c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	b2d8      	uxtb	r0, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	01db      	lsls	r3, r3, #7
 8000c22:	4413      	add	r3, r2
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <ssd1306_DrawPixel+0xa4>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	b25a      	sxtb	r2, r3
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	f003 0307 	and.w	r3, r3, #7
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b259      	sxtb	r1, r3
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	01db      	lsls	r3, r3, #7
 8000c42:	4413      	add	r3, r2
 8000c44:	b2c9      	uxtb	r1, r1
 8000c46:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <ssd1306_DrawPixel+0xa4>)
 8000c48:	54d1      	strb	r1, [r2, r3]
 8000c4a:	e01d      	b.n	8000c88 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	b2d8      	uxtb	r0, r3
 8000c54:	4603      	mov	r3, r0
 8000c56:	01db      	lsls	r3, r3, #7
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <ssd1306_DrawPixel+0xa4>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	b25a      	sxtb	r2, r3
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	4013      	ands	r3, r2
 8000c74:	b259      	sxtb	r1, r3
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	4603      	mov	r3, r0
 8000c7a:	01db      	lsls	r3, r3, #7
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b2c9      	uxtb	r1, r1
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <ssd1306_DrawPixel+0xa4>)
 8000c82:	54d1      	strb	r1, [r2, r3]
 8000c84:	e000      	b.n	8000c88 <ssd1306_DrawPixel+0x98>
        return;
 8000c86:	bf00      	nop
    }
}
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000128 	.word	0x20000128

08000c98 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b1f      	cmp	r3, #31
 8000cae:	d902      	bls.n	8000cb6 <ssd1306_WriteChar+0x1e>
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2b7e      	cmp	r3, #126	; 0x7e
 8000cb4:	d901      	bls.n	8000cba <ssd1306_WriteChar+0x22>
        return 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e079      	b.n	8000dae <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000cba:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	783b      	ldrb	r3, [r7, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	2b80      	cmp	r3, #128	; 0x80
 8000cc6:	dc06      	bgt.n	8000cd6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000cc8:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000cca:	885b      	ldrh	r3, [r3, #2]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	787b      	ldrb	r3, [r7, #1]
 8000cd0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000cd2:	2b40      	cmp	r3, #64	; 0x40
 8000cd4:	dd01      	ble.n	8000cda <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e069      	b.n	8000dae <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	e04e      	b.n	8000d7e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	3b20      	subs	r3, #32
 8000ce6:	7879      	ldrb	r1, [r7, #1]
 8000ce8:	fb01 f303 	mul.w	r3, r1, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	440b      	add	r3, r1
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	e036      	b.n	8000d6e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2d8      	uxtb	r0, r3
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000d20:	885b      	ldrh	r3, [r3, #2]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <ssd1306_DrawPixel>
 8000d36:	e017      	b.n	8000d68 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	b2d8      	uxtb	r0, r3
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000d48:	885b      	ldrh	r3, [r3, #2]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	b2d9      	uxtb	r1, r3
 8000d54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	f7ff ff44 	bl	8000bf0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	783b      	ldrb	r3, [r7, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d3c3      	bcc.n	8000d00 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	787b      	ldrb	r3, [r7, #1]
 8000d80:	461a      	mov	r2, r3
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d3ab      	bcc.n	8000ce0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000d8a:	881a      	ldrh	r2, [r3, #0]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <ssd1306_WriteChar+0x108>
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3b20      	subs	r3, #32
 8000d98:	440b      	add	r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	e001      	b.n	8000da4 <ssd1306_WriteChar+0x10c>
 8000da0:	783b      	ldrb	r3, [r7, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <ssd1306_WriteChar+0x120>)
 8000daa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000528 	.word	0x20000528

08000dbc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	4638      	mov	r0, r7
 8000dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000dca:	e013      	b.n	8000df4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	7818      	ldrb	r0, [r3, #0]
 8000dd0:	7e3b      	ldrb	r3, [r7, #24]
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd8:	f7ff ff5e 	bl	8000c98 <ssd1306_WriteChar>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d002      	beq.n	8000dee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	e008      	b.n	8000e00 <ssd1306_WriteString+0x44>
        }
        str++;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e7      	bne.n	8000dcc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <ssd1306_SetCursor+0x2c>)
 8000e1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <ssd1306_SetCursor+0x2c>)
 8000e26:	805a      	strh	r2, [r3, #2]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000528 	.word	0x20000528

08000e38 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4623      	mov	r3, r4
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71bb      	strb	r3, [r7, #6]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	717b      	strb	r3, [r7, #5]
 8000e52:	4613      	mov	r3, r2
 8000e54:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000e56:	79fa      	ldrb	r2, [r7, #7]
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	bf28      	it	cs
 8000e5e:	4613      	movcs	r3, r2
 8000e60:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000e62:	797a      	ldrb	r2, [r7, #5]
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	bf38      	it	cc
 8000e6a:	4613      	movcc	r3, r2
 8000e6c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	793b      	ldrb	r3, [r7, #4]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	bf28      	it	cs
 8000e76:	4613      	movcs	r3, r2
 8000e78:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000e7a:	793a      	ldrb	r2, [r7, #4]
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	bf38      	it	cc
 8000e82:	4613      	movcc	r3, r2
 8000e84:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000e86:	7afb      	ldrb	r3, [r7, #11]
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	e017      	b.n	8000ebc <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	73bb      	strb	r3, [r7, #14]
 8000e90:	e009      	b.n	8000ea6 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8000e92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e96:	7bf9      	ldrb	r1, [r7, #15]
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fea8 	bl	8000bf0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	73bb      	strb	r3, [r7, #14]
 8000ea6:	7bba      	ldrb	r2, [r7, #14]
 8000ea8:	7b3b      	ldrb	r3, [r7, #12]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d803      	bhi.n	8000eb6 <ssd1306_FillRectangle+0x7e>
 8000eae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	daed      	bge.n	8000e92 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	7abb      	ldrb	r3, [r7, #10]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d803      	bhi.n	8000ecc <ssd1306_FillRectangle+0x94>
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec8:	d9e0      	bls.n	8000e8c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
}
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}

08000ed4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000ede:	2381      	movs	r3, #129	; 0x81
 8000ee0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fda7 	bl	8000a38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fda3 	bl	8000a38 <ssd1306_WriteCommand>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f0c:	23af      	movs	r3, #175	; 0xaf
 8000f0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <ssd1306_SetDisplayOn+0x38>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	715a      	strb	r2, [r3, #5]
 8000f16:	e004      	b.n	8000f22 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f18:	23ae      	movs	r3, #174	; 0xae
 8000f1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <ssd1306_SetDisplayOn+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fd87 	bl	8000a38 <ssd1306_WriteCommand>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000528 	.word	0x20000528

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6593      	str	r3, [r2, #88]	; 0x58
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	210f      	movs	r1, #15
 8000f72:	f06f 0001 	mvn.w	r0, #1
 8000f76:	f000 faa0 	bl	80014ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ac      	sub	sp, #176	; 0xb0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2288      	movs	r2, #136	; 0x88
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f005 ff79 	bl	8006ea0 <memset>
  if(hi2c->Instance==I2C1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a21      	ldr	r2, [pc, #132]	; (8001038 <HAL_I2C_MspInit+0xb0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d13b      	bne.n	8001030 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fb8:	2340      	movs	r3, #64	; 0x40
 8000fba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 ffb3 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fd0:	f7ff fd26 	bl	8000a20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000fec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001006:	2304      	movs	r3, #4
 8001008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001010:	4619      	mov	r1, r3
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_I2C_MspInit+0xb8>)
 8001014:	f000 fa7a 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_I2C_MspInit+0xb4>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_I2C_MspInit+0xb4>)
 800101e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	37b0      	adds	r7, #176	; 0xb0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40005400 	.word	0x40005400
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f900 	bl	8001278 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001078:	f004 fd74 	bl	8005b64 <xTaskGetSchedulerState>
 800107c:	4603      	mov	r3, r0
 800107e:	2b01      	cmp	r3, #1
 8001080:	d001      	beq.n	8001086 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001082:	f005 fc59 	bl	8006938 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
//
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800108e:	2002      	movs	r0, #2
 8001090:	f000 fc16 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
//
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
//
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800109c:	2004      	movs	r0, #4
 800109e:	f000 fc0f 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
//
  /* USER CODE END EXTI2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80010ac:	2040      	movs	r0, #64	; 0x40
 80010ae:	f000 fc07 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80010b2:	2080      	movs	r0, #128	; 0x80
 80010b4:	f000 fc04 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80010b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010bc:	f000 fc00 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if (EXTI->PR1 & EXTI_PR1_PIF5) {
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <EXTI9_5_IRQHandler+0x3c>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <EXTI9_5_IRQHandler+0x36>
          EXTI->PR1 = EXTI_PR1_PIF5; // Clear the interrupt flag
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <EXTI9_5_IRQHandler+0x3c>)
 80010ce:	2220      	movs	r2, #32
 80010d0:	615a      	str	r2, [r3, #20]
          GPIOC->ODR ^= GPIO_ODR_OD0; // Toggle PC0
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <EXTI9_5_IRQHandler+0x40>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <EXTI9_5_IRQHandler+0x40>)
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	6153      	str	r3, [r2, #20]
      }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40010400 	.word	0x40010400
 80010e8:	48000800 	.word	0x48000800

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f005 fec8 	bl	8006eb0 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20018000 	.word	0x20018000
 800114c:	00000400 	.word	0x00000400
 8001150:	20000530 	.word	0x20000530
 8001154:	20001f88 	.word	0x20001f88

08001158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001180:	f7ff ffea 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <LoopForever+0xe>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	; (80011c8 <LoopForever+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011aa:	f005 fe87 	bl	8006ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ae:	f7ff fadb 	bl	8000768 <main>

080011b2 <LoopForever>:

LoopForever:
    b LoopForever
 80011b2:	e7fe      	b.n	80011b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011c0:	08008c70 	.word	0x08008c70
  ldr r2, =_sbss
 80011c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011c8:	20001f88 	.word	0x20001f88

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>

080011ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f963 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f80e 	bl	8001200 <HAL_InitTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	e001      	b.n	80011f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f0:	f7ff fea2 	bl	8000f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_InitTick+0x70>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f961 	bl	80014f2 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d809      	bhi.n	8001250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f939 	bl	80014ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_InitTick+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e007      	b.n	8001260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e004      	b.n	8001260 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e001      	b.n	8001260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000010 	.word	0x20000010
 8001270:	20000008 	.word	0x20000008
 8001274:	2000000c 	.word	0x2000000c

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000010 	.word	0x20000010
 800129c:	20000534 	.word	0x20000534

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000534 	.word	0x20000534

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000010 	.word	0x20000010

08001300 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_SuspendTick+0x1c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_SuspendTick+0x1c>)
 800130a:	f023 0302 	bic.w	r3, r3, #2
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_ResumeTick+0x1c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_ResumeTick+0x1c>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff47 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff5c 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffb0 	bl	8001460 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e17f      	b.n	800181c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	4013      	ands	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8171 	beq.w	8001816 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d005      	beq.n	800154c <HAL_GPIO_Init+0x40>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d130      	bne.n	80015ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001582:	2201      	movs	r2, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 0201 	and.w	r2, r3, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d118      	bne.n	80015ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015c0:	2201      	movs	r2, #1
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	f003 0201 	and.w	r2, r3, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d017      	beq.n	8001628 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d123      	bne.n	800167c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	6939      	ldr	r1, [r7, #16]
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80ac 	beq.w	8001816 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b5f      	ldr	r3, [pc, #380]	; (800183c <HAL_GPIO_Init+0x330>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a5e      	ldr	r2, [pc, #376]	; (800183c <HAL_GPIO_Init+0x330>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <HAL_GPIO_Init+0x330>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016d6:	4a5a      	ldr	r2, [pc, #360]	; (8001840 <HAL_GPIO_Init+0x334>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x242>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x338>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x23e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <HAL_GPIO_Init+0x33c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x23a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_GPIO_Init+0x340>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x236>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x344>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x232>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_GPIO_Init+0x348>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x22e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_GPIO_Init+0x34c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x22a>
 8001732:	2306      	movs	r3, #6
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_Init+0x244>
 8001736:	2307      	movs	r3, #7
 8001738:	e00a      	b.n	8001750 <HAL_GPIO_Init+0x244>
 800173a:	2305      	movs	r3, #5
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x244>
 800173e:	2304      	movs	r3, #4
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x244>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x244>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x244>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x244>
 800174e:	2300      	movs	r3, #0
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001760:	4937      	ldr	r1, [pc, #220]	; (8001840 <HAL_GPIO_Init+0x334>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_GPIO_Init+0x350>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001792:	4a32      	ldr	r2, [pc, #200]	; (800185c <HAL_GPIO_Init+0x350>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_GPIO_Init+0x350>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <HAL_GPIO_Init+0x350>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_GPIO_Init+0x350>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_GPIO_Init+0x350>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_GPIO_Init+0x350>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_GPIO_Init+0x350>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	f47f ae78 	bne.w	800151c <HAL_GPIO_Init+0x10>
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000
 8001844:	48000400 	.word	0x48000400
 8001848:	48000800 	.word	0x48000800
 800184c:	48000c00 	.word	0x48000c00
 8001850:	48001000 	.word	0x48001000
 8001854:	48001400 	.word	0x48001400
 8001858:	48001800 	.word	0x48001800
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e001      	b.n	8001882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe ff26 	bl	8000730 <HAL_GPIO_EXTI_Callback>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e08d      	b.n	8001a1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fb36 	bl	8000f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2224      	movs	r2, #36	; 0x24
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001940:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001950:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	e006      	b.n	8001978 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001976:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d108      	bne.n	8001992 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	e007      	b.n	80019a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69d9      	ldr	r1, [r3, #28]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	817b      	strh	r3, [r7, #10]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	813b      	strh	r3, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	f040 80f9 	bne.w	8001c42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_I2C_Mem_Write+0x34>
 8001a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0ed      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_I2C_Mem_Write+0x4e>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e0e6      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a7e:	f7ff fc0f 	bl	80012a0 <HAL_GetTick>
 8001a82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2319      	movs	r3, #25
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f955 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0d1      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2221      	movs	r2, #33	; 0x21
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6a3a      	ldr	r2, [r7, #32]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ac8:	88f8      	ldrh	r0, [r7, #6]
 8001aca:	893a      	ldrh	r2, [r7, #8]
 8001acc:	8979      	ldrh	r1, [r7, #10]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f8b9 	bl	8001c50 <I2C_RequestMemoryWrite>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0a9      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	d90e      	bls.n	8001b18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	22ff      	movs	r2, #255	; 0xff
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	8979      	ldrh	r1, [r7, #10]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 facf 	bl	80020b4 <I2C_TransferConfig>
 8001b16:	e00f      	b.n	8001b38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	8979      	ldrh	r1, [r7, #10]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fabe 	bl	80020b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f94e 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e07b      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d034      	beq.n	8001bf0 <HAL_I2C_Mem_Write+0x1c8>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d130      	bne.n	8001bf0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b94:	2200      	movs	r2, #0
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f8d1 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e04d      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2bff      	cmp	r3, #255	; 0xff
 8001bb0:	d90e      	bls.n	8001bd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	22ff      	movs	r2, #255	; 0xff
 8001bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	8979      	ldrh	r1, [r7, #10]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 fa73 	bl	80020b4 <I2C_TransferConfig>
 8001bce:	e00f      	b.n	8001bf0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	8979      	ldrh	r1, [r7, #10]
 8001be2:	2300      	movs	r3, #0
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fa62 	bl	80020b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d19e      	bne.n	8001b38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f934 	bl	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e01a      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2220      	movs	r2, #32
 8001c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_I2C_Mem_Write+0x224>)
 8001c22:	400b      	ands	r3, r1
 8001c24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	fe00e800 	.word	0xfe00e800

08001c50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	817b      	strh	r3, [r7, #10]
 8001c62:	460b      	mov	r3, r1
 8001c64:	813b      	strh	r3, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <I2C_RequestMemoryWrite+0xa4>)
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fa1b 	bl	80020b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	69b9      	ldr	r1, [r7, #24]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f8ab 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e02c      	b.n	8001cec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c98:	893b      	ldrh	r3, [r7, #8]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ca2:	e015      	b.n	8001cd0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ca4:	893b      	ldrh	r3, [r7, #8]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	69b9      	ldr	r1, [r7, #24]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f891 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e012      	b.n	8001cec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc6:	893b      	ldrh	r3, [r7, #8]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f830 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	80002000 	.word	0x80002000

08001cf8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d103      	bne.n	8001d16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d007      	beq.n	8001d34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	619a      	str	r2, [r3, #24]
  }
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d50:	e031      	b.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d02d      	beq.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff faa1 	bl	80012a0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d122      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d113      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d0be      	beq.n	8001d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dea:	e033      	b.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f87f 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e031      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e06:	d025      	beq.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e08:	f7ff fa4a 	bl	80012a0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d302      	bcc.n	8001e1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11a      	bne.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d013      	beq.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e007      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d1c4      	bne.n	8001dec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e78:	e02f      	b.n	8001eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f838 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02d      	b.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7ff fa07 	bl	80012a0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11a      	bne.n	8001eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d013      	beq.n	8001eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f043 0220 	orr.w	r2, r3, #32
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e007      	b.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d1c8      	bne.n	8001e7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d068      	beq.n	8001ff2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f28:	e049      	b.n	8001fbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d045      	beq.n	8001fbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7ff f9b5 	bl	80012a0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_IsErrorOccurred+0x54>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13a      	bne.n	8001fbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6a:	d121      	bne.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f72:	d01d      	beq.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d01a      	beq.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f8a:	f7ff f989 	bl	80012a0 <HAL_GetTick>
 8001f8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	e00e      	b.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f92:	f7ff f985 	bl	80012a0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b19      	cmp	r3, #25
 8001f9e:	d907      	bls.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001fae:	e006      	b.n	8001fbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d1e9      	bne.n	8001f92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d003      	beq.n	8001fd4 <I2C_IsErrorOccurred+0xe0>
 8001fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0aa      	beq.n	8001f2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00b      	beq.n	8002060 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01c      	beq.n	80020a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff fe45 	bl	8001cf8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <I2C_IsErrorOccurred+0x1bc>)
 800207a:	400b      	ands	r3, r1
 800207c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80020a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	fe00e800 	.word	0xfe00e800

080020b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	817b      	strh	r3, [r7, #10]
 80020c2:	4613      	mov	r3, r2
 80020c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020c6:	897b      	ldrh	r3, [r7, #10]
 80020c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020cc:	7a7b      	ldrb	r3, [r7, #9]
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	4313      	orrs	r3, r2
 80020de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <I2C_TransferConfig+0x60>)
 80020f4:	430b      	orrs	r3, r1
 80020f6:	43db      	mvns	r3, r3
 80020f8:	ea02 0103 	and.w	r1, r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	03ff63ff 	.word	0x03ff63ff

08002118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	d138      	bne.n	80021a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002138:	2302      	movs	r3, #2
 800213a:	e032      	b.n	80021a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800216a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d139      	bne.n	8002238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e033      	b.n	800223a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2224      	movs	r2, #36	; 0x24
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_PWREx_GetVoltageRange+0x18>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000

08002264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002272:	d130      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800227c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002280:	d038      	beq.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002290:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2232      	movs	r2, #50	; 0x32
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0c9b      	lsrs	r3, r3, #18
 80022a4:	3301      	adds	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a8:	e002      	b.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022bc:	d102      	bne.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f2      	bne.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d0:	d110      	bne.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e00f      	b.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d007      	beq.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40007000 	.word	0x40007000
 8002308:	20000008 	.word	0x20000008
 800230c:	431bde83 	.word	0x431bde83

08002310 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800231a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40007000 	.word	0x40007000

08002330 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800233c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002340:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2232      	movs	r2, #50	; 0x32
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	4a13      	ldr	r2, [pc, #76]	; (800239c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	3301      	adds	r3, #1
 8002356:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002358:	e002      	b.n	8002360 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3b01      	subs	r3, #1
 800235e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800236c:	d102      	bne.n	8002374 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f2      	bne.n	800235a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002380:	d101      	bne.n	8002386 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e000      	b.n	8002388 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40007000 	.word	0x40007000
 8002398:	20000008 	.word	0x20000008
 800239c:	431bde83 	.word	0x431bde83

080023a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3ca      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b97      	ldr	r3, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023bc:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80e4 	beq.w	800259c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_RCC_OscConfig+0x4a>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	f040 808b 	bne.w	80024f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 8087 	bne.w	80024f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ea:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x62>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e3a2      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_RCC_OscConfig+0x7c>
 8002412:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241a:	e005      	b.n	8002428 <HAL_RCC_OscConfig+0x88>
 800241c:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002428:	4293      	cmp	r3, r2
 800242a:	d223      	bcs.n	8002474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fd1d 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e383      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002440:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	496d      	ldr	r1, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245e:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4968      	ldr	r1, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
 8002472:	e025      	b.n	80024c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4960      	ldr	r1, [pc, #384]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	495b      	ldr	r1, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fcdd 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e343      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c0:	f000 fc4a 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b52      	ldr	r3, [pc, #328]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	4950      	ldr	r1, [pc, #320]	; (8002614 <HAL_RCC_OscConfig+0x274>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_RCC_OscConfig+0x278>)
 80024de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e0:	4b4e      	ldr	r3, [pc, #312]	; (800261c <HAL_RCC_OscConfig+0x27c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fe8b 	bl	8001200 <HAL_InitTick>
 80024ea:	4603      	mov	r3, r0
 80024ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d052      	beq.n	800259a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	e327      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d032      	beq.n	8002566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002500:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a42      	ldr	r2, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250c:	f7fe fec8 	bl	80012a0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002514:	f7fe fec4 	bl	80012a0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e310      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a36      	ldr	r2, [pc, #216]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4931      	ldr	r1, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	492c      	ldr	r1, [pc, #176]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e01a      	b.n	800259c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a29      	ldr	r2, [pc, #164]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002572:	f7fe fe95 	bl	80012a0 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800257a:	f7fe fe91 	bl	80012a0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e2dd      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x1da>
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d074      	beq.n	8002692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x21a>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	d10e      	bne.n	80025d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d10b      	bne.n	80025d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d064      	beq.n	8002690 <HAL_RCC_OscConfig+0x2f0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d160      	bne.n	8002690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e2ba      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x24a>
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e026      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_OscConfig+0x280>
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a05      	ldr	r2, [pc, #20]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 80025fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a02      	ldr	r2, [pc, #8]	; (8002610 <HAL_RCC_OscConfig+0x270>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	08008bf4 	.word	0x08008bf4
 8002618:	20000008 	.word	0x20000008
 800261c:	2000000c 	.word	0x2000000c
 8002620:	4ba0      	ldr	r3, [pc, #640]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a9f      	ldr	r2, [pc, #636]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b9d      	ldr	r3, [pc, #628]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a9c      	ldr	r2, [pc, #624]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fe2e 	bl	80012a0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7fe fe2a 	bl	80012a0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e276      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x2a8>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fe1a 	bl	80012a0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7fe fe16 	bl	80012a0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e262      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002682:	4b88      	ldr	r3, [pc, #544]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d0>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d060      	beq.n	8002760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x310>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d119      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d116      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	4b7c      	ldr	r3, [pc, #496]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x328>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e23f      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	4973      	ldr	r1, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	e040      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d023      	beq.n	800272e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e6:	4b6f      	ldr	r3, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6e      	ldr	r2, [pc, #440]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fdd5 	bl	80012a0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe fdd1 	bl	80012a0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e21d      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270c:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	495f      	ldr	r1, [pc, #380]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fdb1 	bl	80012a0 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fdad 	bl	80012a0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1f9      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002754:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01c      	beq.n	80027ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	4a4a      	ldr	r2, [pc, #296]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe fd8c 	bl	80012a0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fd88 	bl	80012a0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1d4      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCC_OscConfig+0x3ec>
 80027ac:	e01b      	b.n	80027e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b4:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fd6f 	bl	80012a0 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fd6b 	bl	80012a0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1b7      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d8:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ef      	bne.n	80027c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80a6 	beq.w	8002940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	; 0x58
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281c:	2301      	movs	r3, #1
 800281e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d118      	bne.n	800285e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002838:	f7fe fd32 	bl	80012a0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fe fd2e 	bl	80012a0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e17a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <HAL_RCC_OscConfig+0x4d8>
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002876:	e029      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d115      	bne.n	80028ac <HAL_RCC_OscConfig+0x50c>
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	4a03      	ldr	r2, [pc, #12]	; (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
 80028ac:	4b9c      	ldr	r3, [pc, #624]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a9b      	ldr	r2, [pc, #620]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028bc:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a97      	ldr	r2, [pc, #604]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d016      	beq.n	8002902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fce4 	bl	80012a0 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7fe fce0 	bl	80012a0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e12a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ed      	beq.n	80028dc <HAL_RCC_OscConfig+0x53c>
 8002900:	e015      	b.n	800292e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe fccd 	bl	80012a0 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe fcc9 	bl	80012a0 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e113      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002920:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ed      	bne.n	800290a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80fe 	beq.w	8002b46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 80d0 	bne.w	8002af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002954:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	429a      	cmp	r2, r3
 8002966:	d130      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	3b01      	subs	r3, #1
 8002974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d127      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d11f      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002994:	2a07      	cmp	r2, #7
 8002996:	bf14      	ite	ne
 8002998:	2201      	movne	r2, #1
 800299a:	2200      	moveq	r2, #0
 800299c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299e:	4293      	cmp	r3, r2
 80029a0:	d113      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d06e      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d069      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0ad      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f8:	f7fe fc52 	bl	80012a0 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fc4e 	bl	80012a0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e09a      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a12:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1e:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <HAL_RCC_OscConfig+0x784>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a38:	0212      	lsls	r2, r2, #8
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a40:	0852      	lsrs	r2, r2, #1
 8002a42:	3a01      	subs	r2, #1
 8002a44:	0552      	lsls	r2, r2, #21
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a4c:	0852      	lsrs	r2, r2, #1
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0652      	lsls	r2, r2, #25
 8002a52:	4311      	orrs	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a58:	0912      	lsrs	r2, r2, #4
 8002a5a:	0452      	lsls	r2, r2, #17
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4930      	ldr	r1, [pc, #192]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a7c:	f7fe fc10 	bl	80012a0 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe fc0c 	bl	80012a0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e058      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa2:	e050      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04f      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d148      	bne.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002acc:	f7fe fbe8 	bl	80012a0 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fbe4 	bl	80012a0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e030      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x734>
 8002af2:	e028      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d023      	beq.n	8002b42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_RCC_OscConfig+0x780>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fbcb 	bl	80012a0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fbc7 	bl	80012a0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d905      	bls.n	8002b28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e013      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ec      	bne.n	8002b0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4905      	ldr	r1, [pc, #20]	; (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_OscConfig+0x7b4>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
 8002b40:	e001      	b.n	8002b46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	feeefffc 	.word	0xfeeefffc

08002b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0e7      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d910      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4970      	ldr	r1, [pc, #448]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0cf      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d908      	bls.n	8002bca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4960      	ldr	r1, [pc, #384]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04c      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b5a      	ldr	r3, [pc, #360]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0a6      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e09a      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e08e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e086      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4943      	ldr	r1, [pc, #268]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe fb2e 	bl	80012a0 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe fb2a 	bl	80012a0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e06e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d208      	bcs.n	8002c9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	492b      	ldr	r1, [pc, #172]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d210      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 0207 	bic.w	r2, r3, #7
 8002cb4:	4923      	ldr	r1, [pc, #140]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e036      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4918      	ldr	r1, [pc, #96]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4910      	ldr	r1, [pc, #64]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0c:	f000 f824 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	490b      	ldr	r1, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1f4>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1fc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fa65 	bl	8001200 <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08008bf4 	.word	0x08008bf4
 8002d50:	20000008 	.word	0x20000008
 8002d54:	2000000c 	.word	0x2000000c

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x34>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d11e      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e005      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d102      	bne.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	e004      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d134      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0xac>
 8002dfc:	e005      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e00:	617b      	str	r3, [r7, #20]
      break;
 8002e02:	e005      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e06:	617b      	str	r3, [r7, #20]
      break;
 8002e08:	e002      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	617b      	str	r3, [r7, #20]
      break;
 8002e0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	fb03 f202 	mul.w	r2, r3, r2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	0e5b      	lsrs	r3, r3, #25
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e50:	69bb      	ldr	r3, [r7, #24]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08008c04 	.word	0x08008c04
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e88:	f7ff f9de 	bl	8002248 <HAL_PWREx_GetVoltageRange>
 8002e8c:	6178      	str	r0, [r7, #20]
 8002e8e:	e014      	b.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea8:	f7ff f9ce 	bl	8002248 <HAL_PWREx_GetVoltageRange>
 8002eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec0:	d10b      	bne.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d919      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2ba0      	cmp	r3, #160	; 0xa0
 8002ecc:	d902      	bls.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ece:	2302      	movs	r3, #2
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e013      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	e010      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d902      	bls.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e00a      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d102      	bne.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eec:	2302      	movs	r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e004      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b70      	cmp	r3, #112	; 0x70
 8002ef6:	d101      	bne.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4909      	ldr	r1, [pc, #36]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d041      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f54:	d02a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f5a:	d824      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f60:	d008      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f66:	d81e      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f70:	d010      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f72:	e018      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f74:	4b86      	ldr	r3, [pc, #536]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a85      	ldr	r2, [pc, #532]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f80:	e015      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fabb 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f92:	e00c      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3320      	adds	r3, #32
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fba6 	bl	80036ec <RCCEx_PLLSAI2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa4:	e003      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb4:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc2:	4973      	ldr	r1, [pc, #460]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fca:	e001      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d041      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fe4:	d02a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fea:	d824      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff6:	d81e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003000:	d010      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003002:	e018      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003004:	4b62      	ldr	r3, [pc, #392]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a61      	ldr	r2, [pc, #388]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fa73 	bl	8003504 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb5e 	bl	80036ec <RCCEx_PLLSAI2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003044:	4b52      	ldr	r3, [pc, #328]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003052:	494f      	ldr	r1, [pc, #316]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a0 	beq.w	80031ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a40      	ldr	r2, [pc, #256]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3a      	ldr	r2, [pc, #232]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b0:	f7fe f8f6 	bl	80012a0 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe f8f2 	bl	80012a0 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d15c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01f      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d019      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a20      	ldr	r2, [pc, #128]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe f8b1 	bl	80012a0 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	e00b      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe f8ad 	bl	80012a0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
            break;
 8003158:	e006      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ec      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	4904      	ldr	r1, [pc, #16]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319c:	7c7b      	ldrb	r3, [r7, #17]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b9e      	ldr	r3, [pc, #632]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	4a9d      	ldr	r2, [pc, #628]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ba:	4b98      	ldr	r3, [pc, #608]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f023 0203 	bic.w	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	4994      	ldr	r1, [pc, #592]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031dc:	4b8f      	ldr	r3, [pc, #572]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f023 020c 	bic.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	498c      	ldr	r1, [pc, #560]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fe:	4b87      	ldr	r3, [pc, #540]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4983      	ldr	r1, [pc, #524]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	497b      	ldr	r1, [pc, #492]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	4972      	ldr	r1, [pc, #456]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003264:	4b6d      	ldr	r3, [pc, #436]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	496a      	ldr	r1, [pc, #424]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	4961      	ldr	r1, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a8:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	4959      	ldr	r1, [pc, #356]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	4950      	ldr	r1, [pc, #320]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	4948      	ldr	r1, [pc, #288]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	493f      	ldr	r1, [pc, #252]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d028      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003330:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333e:	4937      	ldr	r1, [pc, #220]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334e:	d106      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335a:	60d3      	str	r3, [r2, #12]
 800335c:	e011      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003366:	d10c      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f8c8 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d028      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800338e:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d106      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b8:	60d3      	str	r3, [r2, #12]
 80033ba:	e011      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f899 	bl	8003504 <RCCEx_PLLSAI1_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340a:	d109      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a02      	ldr	r2, [pc, #8]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	e014      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f867 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	4928      	ldr	r1, [pc, #160]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346e:	d10d      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f844 	bl	8003504 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d014      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	74bb      	strb	r3, [r7, #18]
 800348a:	e011      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3320      	adds	r3, #32
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f925 	bl	80036ec <RCCEx_PLLSAI2_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ca:	490d      	ldr	r1, [pc, #52]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ee:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003512:	4b75      	ldr	r3, [pc, #468]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800351e:	4b72      	ldr	r3, [pc, #456]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d10d      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
       ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003536:	4b6c      	ldr	r3, [pc, #432]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
       ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d047      	beq.n	80035da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	e044      	b.n	80035da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d018      	beq.n	800358a <RCCEx_PLLSAI1_Config+0x86>
 8003558:	2b03      	cmp	r3, #3
 800355a:	d825      	bhi.n	80035a8 <RCCEx_PLLSAI1_Config+0xa4>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d002      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x62>
 8003560:	2b02      	cmp	r3, #2
 8003562:	d009      	beq.n	8003578 <RCCEx_PLLSAI1_Config+0x74>
 8003564:	e020      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003566:	4b60      	ldr	r3, [pc, #384]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11d      	bne.n	80035ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003576:	e01a      	b.n	80035ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003578:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003588:	e013      	b.n	80035b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800358a:	4b57      	ldr	r3, [pc, #348]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035a6:	e006      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e004      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035be:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	430b      	orrs	r3, r1
 80035d4:	4944      	ldr	r1, [pc, #272]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d17d      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035e0:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a40      	ldr	r2, [pc, #256]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fd fe58 	bl	80012a0 <HAL_GetTick>
 80035f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035f2:	e009      	b.n	8003608 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f4:	f7fd fe54 	bl	80012a0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d902      	bls.n	8003608 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	73fb      	strb	r3, [r7, #15]
        break;
 8003606:	e005      	b.n	8003614 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ef      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d160      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003620:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6892      	ldr	r2, [r2, #8]
 8003630:	0211      	lsls	r1, r2, #8
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68d2      	ldr	r2, [r2, #12]
 8003636:	0912      	lsrs	r2, r2, #4
 8003638:	0452      	lsls	r2, r2, #17
 800363a:	430a      	orrs	r2, r1
 800363c:	492a      	ldr	r1, [pc, #168]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	610b      	str	r3, [r1, #16]
 8003642:	e027      	b.n	8003694 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d112      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003652:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	0211      	lsls	r1, r2, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6912      	ldr	r2, [r2, #16]
 8003660:	0852      	lsrs	r2, r2, #1
 8003662:	3a01      	subs	r2, #1
 8003664:	0552      	lsls	r2, r2, #21
 8003666:	430a      	orrs	r2, r1
 8003668:	491f      	ldr	r1, [pc, #124]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	610b      	str	r3, [r1, #16]
 800366e:	e011      	b.n	8003694 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003678:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6892      	ldr	r2, [r2, #8]
 8003680:	0211      	lsls	r1, r2, #8
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6952      	ldr	r2, [r2, #20]
 8003686:	0852      	lsrs	r2, r2, #1
 8003688:	3a01      	subs	r2, #1
 800368a:	0652      	lsls	r2, r2, #25
 800368c:	430a      	orrs	r2, r1
 800368e:	4916      	ldr	r1, [pc, #88]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800369e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fd fdfe 	bl	80012a0 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036a6:	e009      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a8:	f7fd fdfa 	bl	80012a0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d902      	bls.n	80036bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	73fb      	strb	r3, [r7, #15]
          break;
 80036ba:	e005      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ef      	beq.n	80036a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	4904      	ldr	r1, [pc, #16]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036fa:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d018      	beq.n	8003738 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003706:	4b67      	ldr	r3, [pc, #412]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0203 	and.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d10d      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
       ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800371e:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
       ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d047      	beq.n	80037c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e044      	b.n	80037c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d018      	beq.n	8003772 <RCCEx_PLLSAI2_Config+0x86>
 8003740:	2b03      	cmp	r3, #3
 8003742:	d825      	bhi.n	8003790 <RCCEx_PLLSAI2_Config+0xa4>
 8003744:	2b01      	cmp	r3, #1
 8003746:	d002      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x62>
 8003748:	2b02      	cmp	r3, #2
 800374a:	d009      	beq.n	8003760 <RCCEx_PLLSAI2_Config+0x74>
 800374c:	e020      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800374e:	4b55      	ldr	r3, [pc, #340]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11d      	bne.n	8003796 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375e:	e01a      	b.n	8003796 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003770:	e013      	b.n	800379a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003772:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800377e:	4b49      	ldr	r3, [pc, #292]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800378e:	e006      	b.n	800379e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e004      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800379e:	bf00      	nop
    }

    if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10d      	bne.n	80037c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037a6:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	430b      	orrs	r3, r1
 80037bc:	4939      	ldr	r1, [pc, #228]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d167      	bne.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037c8:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a35      	ldr	r2, [pc, #212]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fd fd64 	bl	80012a0 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037da:	e009      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037dc:	f7fd fd60 	bl	80012a0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	73fb      	strb	r3, [r7, #15]
        break;
 80037ee:	e005      	b.n	80037fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f0:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ef      	bne.n	80037dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d14a      	bne.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d111      	bne.n	800382c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	0912      	lsrs	r2, r2, #4
 8003820:	0452      	lsls	r2, r2, #17
 8003822:	430a      	orrs	r2, r1
 8003824:	491f      	ldr	r1, [pc, #124]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	614b      	str	r3, [r1, #20]
 800382a:	e011      	b.n	8003850 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800382c:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6892      	ldr	r2, [r2, #8]
 800383c:	0211      	lsls	r1, r2, #8
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6912      	ldr	r2, [r2, #16]
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	3a01      	subs	r2, #1
 8003846:	0652      	lsls	r2, r2, #25
 8003848:	430a      	orrs	r2, r1
 800384a:	4916      	ldr	r1, [pc, #88]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fd fd20 	bl	80012a0 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003862:	e009      	b.n	8003878 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003864:	f7fd fd1c 	bl	80012a0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	73fb      	strb	r3, [r7, #15]
          break;
 8003876:	e005      	b.n	8003884 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4904      	ldr	r1, [pc, #16]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000

080038a8 <__NVIC_SetPriority>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	; (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	; (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003900:	2100      	movs	r1, #0
 8003902:	f06f 0004 	mvn.w	r0, #4
 8003906:	f7ff ffcf 	bl	80038a8 <__NVIC_SetPriority>
#endif
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003916:	f3ef 8305 	mrs	r3, IPSR
 800391a:	603b      	str	r3, [r7, #0]
  return(result);
 800391c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003922:	f06f 0305 	mvn.w	r3, #5
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	e00c      	b.n	8003944 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <osKernelInitialize+0x44>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <osKernelInitialize+0x44>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	e002      	b.n	8003944 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000538 	.word	0x20000538

08003958 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800395e:	f3ef 8305 	mrs	r3, IPSR
 8003962:	603b      	str	r3, [r7, #0]
  return(result);
 8003964:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <osKernelStart+0x1a>
    stat = osErrorISR;
 800396a:	f06f 0305 	mvn.w	r3, #5
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	e010      	b.n	8003994 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <osKernelStart+0x48>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d109      	bne.n	800398e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800397a:	f7ff ffbf 	bl	80038fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <osKernelStart+0x48>)
 8003980:	2202      	movs	r2, #2
 8003982:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003984:	f001 fca6 	bl	80052d4 <vTaskStartScheduler>
      stat = osOK;
 8003988:	2300      	movs	r3, #0
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	e002      	b.n	8003994 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003994:	687b      	ldr	r3, [r7, #4]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000538 	.word	0x20000538

080039a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	; 0x38
 80039a8:	af04      	add	r7, sp, #16
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b4:	f3ef 8305 	mrs	r3, IPSR
 80039b8:	617b      	str	r3, [r7, #20]
  return(result);
 80039ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d17e      	bne.n	8003abe <osThreadNew+0x11a>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d07b      	beq.n	8003abe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039ca:	2318      	movs	r3, #24
 80039cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d045      	beq.n	8003a6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <osThreadNew+0x48>
        name = attr->name;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <osThreadNew+0x6e>
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b38      	cmp	r3, #56	; 0x38
 8003a04:	d805      	bhi.n	8003a12 <osThreadNew+0x6e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <osThreadNew+0x72>
        return (NULL);
 8003a12:	2300      	movs	r3, #0
 8003a14:	e054      	b.n	8003ac0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <osThreadNew+0xa8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b5b      	cmp	r3, #91	; 0x5b
 8003a34:	d90a      	bls.n	8003a4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d006      	beq.n	8003a4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <osThreadNew+0xa8>
        mem = 1;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e010      	b.n	8003a6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10c      	bne.n	8003a6e <osThreadNew+0xca>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <osThreadNew+0xca>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <osThreadNew+0xca>
          mem = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	e001      	b.n	8003a6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d110      	bne.n	8003a96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a7c:	9202      	str	r2, [sp, #8]
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6a3a      	ldr	r2, [r7, #32]
 8003a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f001 fa4c 	bl	8004f28 <xTaskCreateStatic>
 8003a90:	4603      	mov	r3, r0
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	e013      	b.n	8003abe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d110      	bne.n	8003abe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 fa97 	bl	8004fe2 <xTaskCreate>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <osThreadNew+0x11a>
            hTask = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003abe:	693b      	ldr	r3, [r7, #16]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad0:	f3ef 8305 	mrs	r3, IPSR
 8003ad4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <osDelay+0x1c>
    stat = osErrorISR;
 8003adc:	f06f 0305 	mvn.w	r3, #5
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e007      	b.n	8003af4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f001 fbbc 	bl	800526c <vTaskDelay>
    }
  }

  return (stat);
 8003af4:	68fb      	ldr	r3, [r7, #12]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b08a      	sub	sp, #40	; 0x28
 8003b02:	af02      	add	r7, sp, #8
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b0e:	f3ef 8305 	mrs	r3, IPSR
 8003b12:	613b      	str	r3, [r7, #16]
  return(result);
 8003b14:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d175      	bne.n	8003c06 <osSemaphoreNew+0x108>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d072      	beq.n	8003c06 <osSemaphoreNew+0x108>
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d86e      	bhi.n	8003c06 <osSemaphoreNew+0x108>
    mem = -1;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d006      	beq.n	8003b4a <osSemaphoreNew+0x4c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b4f      	cmp	r3, #79	; 0x4f
 8003b42:	d902      	bls.n	8003b4a <osSemaphoreNew+0x4c>
        mem = 1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e00c      	b.n	8003b64 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d108      	bne.n	8003b64 <osSemaphoreNew+0x66>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <osSemaphoreNew+0x66>
          mem = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e001      	b.n	8003b64 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d04c      	beq.n	8003c06 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d128      	bne.n	8003bc4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10a      	bne.n	8003b8e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	9200      	str	r2, [sp, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2100      	movs	r1, #0
 8003b84:	2001      	movs	r0, #1
 8003b86:	f000 fa29 	bl	8003fdc <xQueueGenericCreateStatic>
 8003b8a:	61f8      	str	r0, [r7, #28]
 8003b8c:	e005      	b.n	8003b9a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003b8e:	2203      	movs	r2, #3
 8003b90:	2100      	movs	r1, #0
 8003b92:	2001      	movs	r0, #1
 8003b94:	f000 fa9a 	bl	80040cc <xQueueGenericCreate>
 8003b98:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d022      	beq.n	8003be6 <osSemaphoreNew+0xe8>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01f      	beq.n	8003be6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2100      	movs	r1, #0
 8003bac:	69f8      	ldr	r0, [r7, #28]
 8003bae:	f000 fb55 	bl	800425c <xQueueGenericSend>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d016      	beq.n	8003be6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003bb8:	69f8      	ldr	r0, [r7, #28]
 8003bba:	f000 ffe1 	bl	8004b80 <vQueueDelete>
            hSemaphore = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e010      	b.n	8003be6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d108      	bne.n	8003bdc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fad7 	bl	8004186 <xQueueCreateCountingSemaphoreStatic>
 8003bd8:	61f8      	str	r0, [r7, #28]
 8003bda:	e004      	b.n	8003be6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fb08 	bl	80041f4 <xQueueCreateCountingSemaphore>
 8003be4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <osSemaphoreNew+0xfc>
          name = attr->name;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e001      	b.n	8003bfe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003bfe:	6979      	ldr	r1, [r7, #20]
 8003c00:	69f8      	ldr	r0, [r7, #28]
 8003c02:	f001 f909 	bl	8004e18 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003c06:	69fb      	ldr	r3, [r7, #28]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d103      	bne.n	8003c30 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003c28:	f06f 0303 	mvn.w	r3, #3
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e039      	b.n	8003ca4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c30:	f3ef 8305 	mrs	r3, IPSR
 8003c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c36:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003c42:	f06f 0303 	mvn.w	r3, #3
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e02c      	b.n	8003ca4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003c4e:	f107 0308 	add.w	r3, r7, #8
 8003c52:	461a      	mov	r2, r3
 8003c54:	2100      	movs	r1, #0
 8003c56:	6938      	ldr	r0, [r7, #16]
 8003c58:	f000 ff12 	bl	8004a80 <xQueueReceiveFromISR>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d003      	beq.n	8003c6a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003c62:	f06f 0302 	mvn.w	r3, #2
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e01c      	b.n	8003ca4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d019      	beq.n	8003ca4 <osSemaphoreAcquire+0x94>
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <osSemaphoreAcquire+0xa0>)
 8003c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	e010      	b.n	8003ca4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003c82:	6839      	ldr	r1, [r7, #0]
 8003c84:	6938      	ldr	r0, [r7, #16]
 8003c86:	f000 fdef 	bl	8004868 <xQueueSemaphoreTake>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d009      	beq.n	8003ca4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003c96:	f06f 0301 	mvn.w	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e002      	b.n	8003ca4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003c9e:	f06f 0302 	mvn.w	r3, #2
 8003ca2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003ca4:	697b      	ldr	r3, [r7, #20]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003cca:	f06f 0303 	mvn.w	r3, #3
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e02c      	b.n	8003d2c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cd2:	f3ef 8305 	mrs	r3, IPSR
 8003cd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01a      	beq.n	8003d14 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6938      	ldr	r0, [r7, #16]
 8003cea:	f000 fc50 	bl	800458e <xQueueGiveFromISR>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d003      	beq.n	8003cfc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003cf4:	f06f 0302 	mvn.w	r3, #2
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e017      	b.n	8003d2c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d014      	beq.n	8003d2c <osSemaphoreRelease+0x78>
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <osSemaphoreRelease+0x84>)
 8003d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	e00b      	b.n	8003d2c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003d14:	2300      	movs	r3, #0
 8003d16:	2200      	movs	r2, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	6938      	ldr	r0, [r7, #16]
 8003d1c:	f000 fa9e 	bl	800425c <xQueueGenericSend>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d002      	beq.n	8003d2c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003d26:	f06f 0302 	mvn.w	r3, #2
 8003d2a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003d2c:	697b      	ldr	r3, [r7, #20]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a06      	ldr	r2, [pc, #24]	; (8003d6c <vApplicationGetIdleTaskMemory+0x30>)
 8003d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	2000053c 	.word	0x2000053c
 8003d6c:	20000598 	.word	0x20000598

08003d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <vApplicationGetTimerTaskMemory+0x30>)
 8003d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	20000798 	.word	0x20000798
 8003da0:	200007f4 	.word	0x200007f4

08003da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f103 0208 	add.w	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f103 0208 	add.w	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f103 0208 	add.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d103      	bne.n	8003e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e00c      	b.n	8003e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e002      	b.n	8003e74 <vListInsert+0x2e>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d2f6      	bcs.n	8003e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	601a      	str	r2, [r3, #0]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6852      	ldr	r2, [r2, #4]
 8003ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d103      	bne.n	8003eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f36:	f002 fc6d 	bl	8006814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	3b01      	subs	r3, #1
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	22ff      	movs	r2, #255	; 0xff
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d114      	bne.n	8003fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01a      	beq.n	8003fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3310      	adds	r3, #16
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fc25 	bl	80057e8 <xTaskRemoveFromEventList>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <xQueueGenericReset+0xcc>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	e009      	b.n	8003fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3310      	adds	r3, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fef2 	bl	8003da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff feed 	bl	8003da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fca:	f002 fc53 	bl	8006874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fce:	2301      	movs	r3, #1
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08e      	sub	sp, #56	; 0x38
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <xQueueGenericCreateStatic+0x52>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <xQueueGenericCreateStatic+0x56>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <xQueueGenericCreateStatic+0x58>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	623b      	str	r3, [r7, #32]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <xQueueGenericCreateStatic+0x7e>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <xQueueGenericCreateStatic+0x82>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <xQueueGenericCreateStatic+0x84>
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	61fb      	str	r3, [r7, #28]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800407a:	2350      	movs	r3, #80	; 0x50
 800407c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b50      	cmp	r3, #80	; 0x50
 8004082:	d00a      	beq.n	800409a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	61bb      	str	r3, [r7, #24]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800409a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f83f 	bl	8004140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	613b      	str	r3, [r7, #16]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	3350      	adds	r3, #80	; 0x50
 8004104:	4618      	mov	r0, r3
 8004106:	f002 fca7 	bl	8006a58 <pvPortMalloc>
 800410a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d011      	beq.n	8004136 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	3350      	adds	r3, #80	; 0x50
 800411a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004124:	79fa      	ldrb	r2, [r7, #7]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f805 	bl	8004140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004136:	69bb      	ldr	r3, [r7, #24]
	}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e002      	b.n	8004162 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800416e:	2101      	movs	r1, #1
 8004170:	69b8      	ldr	r0, [r7, #24]
 8004172:	f7ff fecb 	bl	8003f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004186:	b580      	push	{r7, lr}
 8004188:	b08a      	sub	sp, #40	; 0x28
 800418a:	af02      	add	r7, sp, #8
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	61bb      	str	r3, [r7, #24]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90a      	bls.n	80041cc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	617b      	str	r3, [r7, #20]
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80041cc:	2302      	movs	r3, #2
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	2100      	movs	r1, #0
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff00 	bl	8003fdc <xQueueGenericCreateStatic>
 80041dc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80041ea:	69fb      	ldr	r3, [r7, #28]
	}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	613b      	str	r3, [r7, #16]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d90a      	bls.n	8004238 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004238:	2202      	movs	r2, #2
 800423a:	2100      	movs	r1, #0
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff45 	bl	80040cc <xQueueGenericCreate>
 8004242:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004250:	697b      	ldr	r3, [r7, #20]
	}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xQueueGenericSend+0x32>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <xQueueGenericSend+0x40>
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <xQueueGenericSend+0x44>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <xQueueGenericSend+0x46>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xQueueGenericSend+0x60>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d103      	bne.n	80042ca <xQueueGenericSend+0x6e>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <xQueueGenericSend+0x72>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueGenericSend+0x74>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xQueueGenericSend+0x8e>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	623b      	str	r3, [r7, #32]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ea:	f001 fc3b 	bl	8005b64 <xTaskGetSchedulerState>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <xQueueGenericSend+0x9e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <xQueueGenericSend+0xa2>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <xQueueGenericSend+0xa4>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xQueueGenericSend+0xbe>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61fb      	str	r3, [r7, #28]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800431a:	f002 fa7b 	bl	8006814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <xQueueGenericSend+0xd4>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d129      	bne.n	8004384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004336:	f000 fc5e 	bl	8004bf6 <prvCopyDataToQueue>
 800433a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	3324      	adds	r3, #36	; 0x24
 8004348:	4618      	mov	r0, r3
 800434a:	f001 fa4d 	bl	80057e8 <xTaskRemoveFromEventList>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004354:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <xQueueGenericSend+0x1f8>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	e00a      	b.n	800437c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <xQueueGenericSend+0x1f8>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800437c:	f002 fa7a 	bl	8006874 <vPortExitCritical>
				return pdPASS;
 8004380:	2301      	movs	r3, #1
 8004382:	e063      	b.n	800444c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800438a:	f002 fa73 	bl	8006874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800438e:	2300      	movs	r3, #0
 8004390:	e05c      	b.n	800444c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fa87 	bl	80058b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043a6:	f002 fa65 	bl	8006874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043aa:	f000 fff9 	bl	80053a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ae:	f002 fa31 	bl	8006814 <vPortEnterCritical>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d103      	bne.n	80043c8 <xQueueGenericSend+0x16c>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d103      	bne.n	80043de <xQueueGenericSend+0x182>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043de:	f002 fa49 	bl	8006874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e2:	1d3a      	adds	r2, r7, #4
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fa76 	bl	80058dc <xTaskCheckForTimeOut>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d124      	bne.n	8004440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f8:	f000 fcf5 	bl	8004de6 <prvIsQueueFull>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d018      	beq.n	8004434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	3310      	adds	r3, #16
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f001 f99c 	bl	8005748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004412:	f000 fc80 	bl	8004d16 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004416:	f000 ffd1 	bl	80053bc <xTaskResumeAll>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f af7c 	bne.w	800431a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <xQueueGenericSend+0x1f8>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	e772      	b.n	800431a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004436:	f000 fc6e 	bl	8004d16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800443a:	f000 ffbf 	bl	80053bc <xTaskResumeAll>
 800443e:	e76c      	b.n	800431a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004442:	f000 fc68 	bl	8004d16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004446:	f000 ffb9 	bl	80053bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800444a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800444c:	4618      	mov	r0, r3
 800444e:	3738      	adds	r7, #56	; 0x38
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <xQueueGenericSendFromISR+0x3c>
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <xQueueGenericSendFromISR+0x40>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <xQueueGenericSendFromISR+0x42>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d103      	bne.n	80044c2 <xQueueGenericSendFromISR+0x6a>
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <xQueueGenericSendFromISR+0x6e>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueGenericSendFromISR+0x70>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	623b      	str	r3, [r7, #32]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044e2:	f002 fa79 	bl	80069d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044e6:	f3ef 8211 	mrs	r2, BASEPRI
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61fa      	str	r2, [r7, #28]
 80044fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <xQueueGenericSendFromISR+0xbc>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d12f      	bne.n	8004574 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800452a:	f000 fb64 	bl	8004bf6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800452e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d112      	bne.n	800455e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	3324      	adds	r3, #36	; 0x24
 8004544:	4618      	mov	r0, r3
 8004546:	f001 f94f 	bl	80057e8 <xTaskRemoveFromEventList>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e007      	b.n	800456e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800455e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004562:	3301      	adds	r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	b25a      	sxtb	r2, r3
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800456e:	2301      	movs	r3, #1
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004572:	e001      	b.n	8004578 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004574:	2300      	movs	r3, #0
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004582:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004586:	4618      	mov	r0, r3
 8004588:	3740      	adds	r7, #64	; 0x40
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b08e      	sub	sp, #56	; 0x38
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	623b      	str	r3, [r7, #32]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	61fb      	str	r3, [r7, #28]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <xQueueGiveFromISR+0x58>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xQueueGiveFromISR+0x5c>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueGiveFromISR+0x5e>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGiveFromISR+0x78>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61bb      	str	r3, [r7, #24]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004606:	f002 f9e7 	bl	80069d8 <vPortValidateInterruptPriority>
	__asm volatile
 800460a:	f3ef 8211 	mrs	r2, BASEPRI
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	617a      	str	r2, [r7, #20]
 8004620:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004622:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004632:	429a      	cmp	r2, r3
 8004634:	d22b      	bcs.n	800468e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800463c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004648:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d112      	bne.n	8004678 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	4618      	mov	r0, r3
 8004660:	f001 f8c2 	bl	80057e8 <xTaskRemoveFromEventList>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00e      	beq.n	8004688 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e007      	b.n	8004688 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467c:	3301      	adds	r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	b25a      	sxtb	r2, r3
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004688:	2301      	movs	r3, #1
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
 800468c:	e001      	b.n	8004692 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800468e:	2300      	movs	r3, #0
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f383 8811 	msr	BASEPRI, r3
}
 800469c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3738      	adds	r7, #56	; 0x38
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <xQueueReceive+0x30>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	623b      	str	r3, [r7, #32]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <xQueueReceive+0x3e>
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <xQueueReceive+0x42>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <xQueueReceive+0x44>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <xQueueReceive+0x5e>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	61fb      	str	r3, [r7, #28]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004706:	f001 fa2d 	bl	8005b64 <xTaskGetSchedulerState>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d102      	bne.n	8004716 <xQueueReceive+0x6e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <xQueueReceive+0x72>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <xQueueReceive+0x74>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <xQueueReceive+0x8e>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	61bb      	str	r3, [r7, #24]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004736:	f002 f86d 	bl	8006814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01f      	beq.n	8004786 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474a:	f000 fabe 	bl	8004cca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00f      	beq.n	800477e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	3310      	adds	r3, #16
 8004762:	4618      	mov	r0, r3
 8004764:	f001 f840 	bl	80057e8 <xTaskRemoveFromEventList>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <xQueueReceive+0x1bc>)
 8004770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800477e:	f002 f879 	bl	8006874 <vPortExitCritical>
				return pdPASS;
 8004782:	2301      	movs	r3, #1
 8004784:	e069      	b.n	800485a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800478c:	f002 f872 	bl	8006874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004790:	2300      	movs	r3, #0
 8004792:	e062      	b.n	800485a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800479a:	f107 0310 	add.w	r3, r7, #16
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 f886 	bl	80058b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047a8:	f002 f864 	bl	8006874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ac:	f000 fdf8 	bl	80053a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047b0:	f002 f830 	bl	8006814 <vPortEnterCritical>
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d103      	bne.n	80047ca <xQueueReceive+0x122>
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d0:	b25b      	sxtb	r3, r3
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d103      	bne.n	80047e0 <xQueueReceive+0x138>
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	f002 f848 	bl	8006874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047e4:	1d3a      	adds	r2, r7, #4
 80047e6:	f107 0310 	add.w	r3, r7, #16
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 f875 	bl	80058dc <xTaskCheckForTimeOut>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d123      	bne.n	8004840 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047fa:	f000 fade 	bl	8004dba <prvIsQueueEmpty>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d017      	beq.n	8004834 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	3324      	adds	r3, #36	; 0x24
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f000 ff9b 	bl	8005748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004814:	f000 fa7f 	bl	8004d16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004818:	f000 fdd0 	bl	80053bc <xTaskResumeAll>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d189      	bne.n	8004736 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <xQueueReceive+0x1bc>)
 8004824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	e780      	b.n	8004736 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004836:	f000 fa6e 	bl	8004d16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800483a:	f000 fdbf 	bl	80053bc <xTaskResumeAll>
 800483e:	e77a      	b.n	8004736 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004842:	f000 fa68 	bl	8004d16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004846:	f000 fdb9 	bl	80053bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800484a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800484c:	f000 fab5 	bl	8004dba <prvIsQueueEmpty>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f43f af6f 	beq.w	8004736 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800485a:	4618      	mov	r0, r3
 800485c:	3730      	adds	r7, #48	; 0x30
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800487a:	2300      	movs	r3, #0
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	623b      	str	r3, [r7, #32]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fb      	str	r3, [r7, #28]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048b8:	f001 f954 	bl	8005b64 <xTaskGetSchedulerState>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <xQueueSemaphoreTake+0x60>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <xQueueSemaphoreTake+0x64>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <xQueueSemaphoreTake+0x66>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	61bb      	str	r3, [r7, #24]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048e8:	f001 ff94 	bl	8006814 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d024      	beq.n	8004942 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004908:	f001 faa2 	bl	8005e50 <pvTaskIncrementMutexHeldCount>
 800490c:	4602      	mov	r2, r0
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00f      	beq.n	800493a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	3310      	adds	r3, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f000 ff62 	bl	80057e8 <xTaskRemoveFromEventList>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800492a:	4b54      	ldr	r3, [pc, #336]	; (8004a7c <xQueueSemaphoreTake+0x214>)
 800492c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800493a:	f001 ff9b 	bl	8006874 <vPortExitCritical>
				return pdPASS;
 800493e:	2301      	movs	r3, #1
 8004940:	e097      	b.n	8004a72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	617b      	str	r3, [r7, #20]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004964:	f001 ff86 	bl	8006874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004968:	2300      	movs	r3, #0
 800496a:	e082      	b.n	8004a72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004972:	f107 030c 	add.w	r3, r7, #12
 8004976:	4618      	mov	r0, r3
 8004978:	f000 ff9a 	bl	80058b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004980:	f001 ff78 	bl	8006874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004984:	f000 fd0c 	bl	80053a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004988:	f001 ff44 	bl	8006814 <vPortEnterCritical>
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004992:	b25b      	sxtb	r3, r3
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d103      	bne.n	80049a2 <xQueueSemaphoreTake+0x13a>
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d103      	bne.n	80049b8 <xQueueSemaphoreTake+0x150>
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b8:	f001 ff5c 	bl	8006874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049bc:	463a      	mov	r2, r7
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 ff89 	bl	80058dc <xTaskCheckForTimeOut>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d132      	bne.n	8004a36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049d2:	f000 f9f2 	bl	8004dba <prvIsQueueEmpty>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d026      	beq.n	8004a2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80049e4:	f001 ff16 	bl	8006814 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 f8d7 	bl	8005ba0 <xTaskPriorityInherit>
 80049f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80049f4:	f001 ff3e 	bl	8006874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fea1 	bl	8005748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a08:	f000 f985 	bl	8004d16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a0c:	f000 fcd6 	bl	80053bc <xTaskResumeAll>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f47f af68 	bne.w	80048e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <xQueueSemaphoreTake+0x214>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	e75e      	b.n	80048e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a2c:	f000 f973 	bl	8004d16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a30:	f000 fcc4 	bl	80053bc <xTaskResumeAll>
 8004a34:	e758      	b.n	80048e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a38:	f000 f96d 	bl	8004d16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a3c:	f000 fcbe 	bl	80053bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a42:	f000 f9ba 	bl	8004dba <prvIsQueueEmpty>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f43f af4d 	beq.w	80048e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00d      	beq.n	8004a70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004a54:	f001 fede 	bl	8006814 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a5a:	f000 f8b4 	bl	8004bc6 <prvGetDisinheritPriorityAfterTimeout>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 f970 	bl	8005d4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a6c:	f001 ff02 	bl	8006874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3738      	adds	r7, #56	; 0x38
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08e      	sub	sp, #56	; 0x38
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	623b      	str	r3, [r7, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <xQueueReceiveFromISR+0x3a>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <xQueueReceiveFromISR+0x3e>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <xQueueReceiveFromISR+0x40>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61fb      	str	r3, [r7, #28]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ada:	f001 ff7d 	bl	80069d8 <vPortValidateInterruptPriority>
	__asm volatile
 8004ade:	f3ef 8211 	mrs	r2, BASEPRI
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	61ba      	str	r2, [r7, #24]
 8004af4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004af6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d02f      	beq.n	8004b66 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b14:	f000 f8d9 	bl	8004cca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	1e5a      	subs	r2, r3, #1
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d112      	bne.n	8004b50 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	3310      	adds	r3, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fe56 	bl	80057e8 <xTaskRemoveFromEventList>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00e      	beq.n	8004b60 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e007      	b.n	8004b60 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b54:	3301      	adds	r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	b25a      	sxtb	r2, r3
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b60:	2301      	movs	r3, #1
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
 8004b64:	e001      	b.n	8004b6a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f383 8811 	msr	BASEPRI, r3
}
 8004b74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3738      	adds	r7, #56	; 0x38
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <vQueueDelete+0x28>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60bb      	str	r3, [r7, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f95f 	bl	8004e6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f002 f819 	bl	8006bf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e001      	b.n	8004be8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004be8:	68fb      	ldr	r3, [r7, #12]
	}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10d      	bne.n	8004c30 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d14d      	bne.n	8004cb8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f825 	bl	8005c70 <xTaskPriorityDisinherit>
 8004c26:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	e043      	b.n	8004cb8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d119      	bne.n	8004c6a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6858      	ldr	r0, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	f002 f961 	bl	8006f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	441a      	add	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d32b      	bcc.n	8004cb8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	e026      	b.n	8004cb8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68d8      	ldr	r0, [r3, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	461a      	mov	r2, r3
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	f002 f947 	bl	8006f08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	425b      	negs	r3, r3
 8004c84:	441a      	add	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d207      	bcs.n	8004ca6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	425b      	negs	r3, r3
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d105      	bne.n	8004cb8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cc0:	697b      	ldr	r3, [r7, #20]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d018      	beq.n	8004d0e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	441a      	add	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d303      	bcc.n	8004cfe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	461a      	mov	r2, r3
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	f002 f8fd 	bl	8006f08 <memcpy>
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d1e:	f001 fd79 	bl	8006814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d28:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d2a:	e011      	b.n	8004d50 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d012      	beq.n	8004d5a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fd55 	bl	80057e8 <xTaskRemoveFromEventList>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d44:	f000 fe2c 	bl	80059a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	dce9      	bgt.n	8004d2c <prvUnlockQueue+0x16>
 8004d58:	e000      	b.n	8004d5c <prvUnlockQueue+0x46>
					break;
 8004d5a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	22ff      	movs	r2, #255	; 0xff
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d64:	f001 fd86 	bl	8006874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d68:	f001 fd54 	bl	8006814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d72:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d74:	e011      	b.n	8004d9a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d012      	beq.n	8004da4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3310      	adds	r3, #16
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fd30 	bl	80057e8 <xTaskRemoveFromEventList>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d8e:	f000 fe07 	bl	80059a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	dce9      	bgt.n	8004d76 <prvUnlockQueue+0x60>
 8004da2:	e000      	b.n	8004da6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004da4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dae:	f001 fd61 	bl	8006874 <vPortExitCritical>
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc2:	f001 fd27 	bl	8006814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e001      	b.n	8004dd8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dd8:	f001 fd4c 	bl	8006874 <vPortExitCritical>

	return xReturn;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dee:	f001 fd11 	bl	8006814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d102      	bne.n	8004e04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e001      	b.n	8004e08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e08:	f001 fd34 	bl	8006874 <vPortExitCritical>

	return xReturn;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e014      	b.n	8004e52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e28:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e34:	490c      	ldr	r1, [pc, #48]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e4a:	e006      	b.n	8004e5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	d9e7      	bls.n	8004e28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000bf4 	.word	0x20000bf4

08004e6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e016      	b.n	8004ea8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <vQueueUnregisterQueue+0x50>)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10b      	bne.n	8004ea2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <vQueueUnregisterQueue+0x50>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e94:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <vQueueUnregisterQueue+0x50>)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	605a      	str	r2, [r3, #4]
				break;
 8004ea0:	e006      	b.n	8004eb0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b07      	cmp	r3, #7
 8004eac:	d9e5      	bls.n	8004e7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000bf4 	.word	0x20000bf4

08004ec0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ed0:	f001 fca0 	bl	8006814 <vPortEnterCritical>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d103      	bne.n	8004eea <vQueueWaitForMessageRestricted+0x2a>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <vQueueWaitForMessageRestricted+0x40>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	f001 fcb8 	bl	8006874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3324      	adds	r3, #36	; 0x24
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fc3b 	bl	8005790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f7ff fefb 	bl	8004d16 <prvUnlockQueue>
	}
 8004f20:	bf00      	nop
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08e      	sub	sp, #56	; 0x38
 8004f2c:	af04      	add	r7, sp, #16
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <xTaskCreateStatic+0x46>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61fb      	str	r3, [r7, #28]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f6e:	235c      	movs	r3, #92	; 0x5c
 8004f70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b5c      	cmp	r3, #92	; 0x5c
 8004f76:	d00a      	beq.n	8004f8e <xTaskCreateStatic+0x66>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61bb      	str	r3, [r7, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01e      	beq.n	8004fd4 <xTaskCreateStatic+0xac>
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9303      	str	r3, [sp, #12]
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f850 	bl	800506c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fce:	f000 f8dd 	bl	800518c <prvAddNewTaskToReadyList>
 8004fd2:	e001      	b.n	8004fd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fd8:	697b      	ldr	r3, [r7, #20]
	}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3728      	adds	r7, #40	; 0x28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08c      	sub	sp, #48	; 0x30
 8004fe6:	af04      	add	r7, sp, #16
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 fd2e 	bl	8006a58 <pvPortMalloc>
 8004ffc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005004:	205c      	movs	r0, #92	; 0x5c
 8005006:	f001 fd27 	bl	8006a58 <pvPortMalloc>
 800500a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
 8005018:	e005      	b.n	8005026 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f001 fde8 	bl	8006bf0 <vPortFree>
 8005020:	e001      	b.n	8005026 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	2300      	movs	r3, #0
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	9302      	str	r3, [sp, #8]
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f80e 	bl	800506c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005050:	69f8      	ldr	r0, [r7, #28]
 8005052:	f000 f89b 	bl	800518c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005056:	2301      	movs	r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e002      	b.n	8005062 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005062:	69bb      	ldr	r3, [r7, #24]
	}
 8005064:	4618      	mov	r0, r3
 8005066:	3720      	adds	r7, #32
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	461a      	mov	r2, r3
 8005084:	21a5      	movs	r1, #165	; 0xa5
 8005086:	f001 ff0b 	bl	8006ea0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005094:	3b01      	subs	r3, #1
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f023 0307 	bic.w	r3, r3, #7
 80050a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	617b      	str	r3, [r7, #20]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01f      	beq.n	800510a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	e012      	b.n	80050f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	7819      	ldrb	r1, [r3, #0]
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	3334      	adds	r3, #52	; 0x34
 80050e0:	460a      	mov	r2, r1
 80050e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d006      	beq.n	80050fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d9e9      	bls.n	80050d0 <prvInitialiseNewTask+0x64>
 80050fc:	e000      	b.n	8005100 <prvInitialiseNewTask+0x94>
			{
				break;
 80050fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005108:	e003      	b.n	8005112 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2b37      	cmp	r3, #55	; 0x37
 8005116:	d901      	bls.n	800511c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005118:	2337      	movs	r3, #55	; 0x37
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005126:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fe56 	bl	8003de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	3318      	adds	r3, #24
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe fe51 	bl	8003de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005146:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	69b8      	ldr	r0, [r7, #24]
 800516c:	f001 fa26 	bl	80065bc <pxPortInitialiseStack>
 8005170:	4602      	mov	r2, r0
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005182:	bf00      	nop
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005194:	f001 fb3e 	bl	8006814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005198:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051a2:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051aa:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d110      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051b8:	f000 fc16 	bl	80059e8 <prvInitialiseTaskLists>
 80051bc:	e00d      	b.n	80051da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <prvAddNewTaskToReadyList+0xcc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d802      	bhi.n	80051da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	4a1e      	ldr	r2, [pc, #120]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <prvAddNewTaskToReadyList+0xd4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d903      	bls.n	8005200 <prvAddNewTaskToReadyList+0x74>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4a18      	ldr	r2, [pc, #96]	; (8005260 <prvAddNewTaskToReadyList+0xd4>)
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4a15      	ldr	r2, [pc, #84]	; (8005264 <prvAddNewTaskToReadyList+0xd8>)
 800520e:	441a      	add	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f7fe fdf1 	bl	8003dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800521c:	f001 fb2a 	bl	8006874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <prvAddNewTaskToReadyList+0xcc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	429a      	cmp	r2, r3
 8005234:	d207      	bcs.n	8005246 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvAddNewTaskToReadyList+0xdc>)
 8005238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20001108 	.word	0x20001108
 8005254:	20000c34 	.word	0x20000c34
 8005258:	20001114 	.word	0x20001114
 800525c:	20001124 	.word	0x20001124
 8005260:	20001110 	.word	0x20001110
 8005264:	20000c38 	.word	0x20000c38
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d017      	beq.n	80052ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <vTaskDelay+0x60>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <vTaskDelay+0x30>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60bb      	str	r3, [r7, #8]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800529c:	f000 f880 	bl	80053a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052a0:	2100      	movs	r1, #0
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fde8 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052a8:	f000 f888 	bl	80053bc <xTaskResumeAll>
 80052ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d107      	bne.n	80052c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <vTaskDelay+0x64>)
 80052b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20001130 	.word	0x20001130
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052e2:	463a      	mov	r2, r7
 80052e4:	1d39      	adds	r1, r7, #4
 80052e6:	f107 0308 	add.w	r3, r7, #8
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fd26 	bl	8003d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	9202      	str	r2, [sp, #8]
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	2300      	movs	r3, #0
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	2300      	movs	r3, #0
 8005300:	460a      	mov	r2, r1
 8005302:	4921      	ldr	r1, [pc, #132]	; (8005388 <vTaskStartScheduler+0xb4>)
 8005304:	4821      	ldr	r0, [pc, #132]	; (800538c <vTaskStartScheduler+0xb8>)
 8005306:	f7ff fe0f 	bl	8004f28 <xTaskCreateStatic>
 800530a:	4603      	mov	r3, r0
 800530c:	4a20      	ldr	r2, [pc, #128]	; (8005390 <vTaskStartScheduler+0xbc>)
 800530e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005310:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <vTaskStartScheduler+0xbc>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e001      	b.n	8005322 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d102      	bne.n	800532e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005328:	f000 fdfa 	bl	8005f20 <xTimerCreateTimerTask>
 800532c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d116      	bne.n	8005362 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	613b      	str	r3, [r7, #16]
}
 8005346:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005348:	4b12      	ldr	r3, [pc, #72]	; (8005394 <vTaskStartScheduler+0xc0>)
 800534a:	f04f 32ff 	mov.w	r2, #4294967295
 800534e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <vTaskStartScheduler+0xc4>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005356:	4b11      	ldr	r3, [pc, #68]	; (800539c <vTaskStartScheduler+0xc8>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800535c:	f001 f9b8 	bl	80066d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005360:	e00e      	b.n	8005380 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d10a      	bne.n	8005380 <vTaskStartScheduler+0xac>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	60fb      	str	r3, [r7, #12]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <vTaskStartScheduler+0xaa>
}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	080077e8 	.word	0x080077e8
 800538c:	080059b9 	.word	0x080059b9
 8005390:	2000112c 	.word	0x2000112c
 8005394:	20001128 	.word	0x20001128
 8005398:	20001114 	.word	0x20001114
 800539c:	2000110c 	.word	0x2000110c

080053a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <vTaskSuspendAll+0x18>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a03      	ldr	r2, [pc, #12]	; (80053b8 <vTaskSuspendAll+0x18>)
 80053ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053ae:	bf00      	nop
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	20001130 	.word	0x20001130

080053bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053ca:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <xTaskResumeAll+0x118>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	603b      	str	r3, [r7, #0]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053e8:	f001 fa14 	bl	8006814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053ec:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <xTaskResumeAll+0x118>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <xTaskResumeAll+0x118>)
 80053f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <xTaskResumeAll+0x118>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d162      	bne.n	80054c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053fe:	4b36      	ldr	r3, [pc, #216]	; (80054d8 <xTaskResumeAll+0x11c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d05e      	beq.n	80054c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005406:	e02f      	b.n	8005468 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005408:	4b34      	ldr	r3, [pc, #208]	; (80054dc <xTaskResumeAll+0x120>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fd4f 	bl	8003eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3304      	adds	r3, #4
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fd4a 	bl	8003eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4b2d      	ldr	r3, [pc, #180]	; (80054e0 <xTaskResumeAll+0x124>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d903      	bls.n	8005438 <xTaskResumeAll+0x7c>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <xTaskResumeAll+0x124>)
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <xTaskResumeAll+0x128>)
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f7fe fcd5 	bl	8003dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <xTaskResumeAll+0x12c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005462:	4b22      	ldr	r3, [pc, #136]	; (80054ec <xTaskResumeAll+0x130>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005468:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <xTaskResumeAll+0x120>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1cb      	bne.n	8005408 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005476:	f000 fb55 	bl	8005b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800547a:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <xTaskResumeAll+0x134>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005486:	f000 f847 	bl	8005518 <xTaskIncrementTick>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005490:	4b16      	ldr	r3, [pc, #88]	; (80054ec <xTaskResumeAll+0x130>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3b01      	subs	r3, #1
 800549a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f1      	bne.n	8005486 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <xTaskResumeAll+0x134>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054a8:	4b10      	ldr	r3, [pc, #64]	; (80054ec <xTaskResumeAll+0x130>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <xTaskResumeAll+0x138>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054c4:	f001 f9d6 	bl	8006874 <vPortExitCritical>

	return xAlreadyYielded;
 80054c8:	68bb      	ldr	r3, [r7, #8]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20001130 	.word	0x20001130
 80054d8:	20001108 	.word	0x20001108
 80054dc:	200010c8 	.word	0x200010c8
 80054e0:	20001110 	.word	0x20001110
 80054e4:	20000c38 	.word	0x20000c38
 80054e8:	20000c34 	.word	0x20000c34
 80054ec:	2000111c 	.word	0x2000111c
 80054f0:	20001118 	.word	0x20001118
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <xTaskGetTickCount+0x1c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005504:	687b      	ldr	r3, [r7, #4]
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000110c 	.word	0x2000110c

08005518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005522:	4b4f      	ldr	r3, [pc, #316]	; (8005660 <xTaskIncrementTick+0x148>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f040 808f 	bne.w	800564a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800552c:	4b4d      	ldr	r3, [pc, #308]	; (8005664 <xTaskIncrementTick+0x14c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005534:	4a4b      	ldr	r2, [pc, #300]	; (8005664 <xTaskIncrementTick+0x14c>)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d120      	bne.n	8005582 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005540:	4b49      	ldr	r3, [pc, #292]	; (8005668 <xTaskIncrementTick+0x150>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <xTaskIncrementTick+0x48>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	603b      	str	r3, [r7, #0]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xTaskIncrementTick+0x46>
 8005560:	4b41      	ldr	r3, [pc, #260]	; (8005668 <xTaskIncrementTick+0x150>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	4b41      	ldr	r3, [pc, #260]	; (800566c <xTaskIncrementTick+0x154>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a3f      	ldr	r2, [pc, #252]	; (8005668 <xTaskIncrementTick+0x150>)
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4a3f      	ldr	r2, [pc, #252]	; (800566c <xTaskIncrementTick+0x154>)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <xTaskIncrementTick+0x158>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	4a3d      	ldr	r2, [pc, #244]	; (8005670 <xTaskIncrementTick+0x158>)
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	f000 fad1 	bl	8005b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005582:	4b3c      	ldr	r3, [pc, #240]	; (8005674 <xTaskIncrementTick+0x15c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	429a      	cmp	r2, r3
 800558a:	d349      	bcc.n	8005620 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800558c:	4b36      	ldr	r3, [pc, #216]	; (8005668 <xTaskIncrementTick+0x150>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005596:	4b37      	ldr	r3, [pc, #220]	; (8005674 <xTaskIncrementTick+0x15c>)
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	601a      	str	r2, [r3, #0]
					break;
 800559e:	e03f      	b.n	8005620 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a0:	4b31      	ldr	r3, [pc, #196]	; (8005668 <xTaskIncrementTick+0x150>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d203      	bcs.n	80055c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055b8:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <xTaskIncrementTick+0x15c>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055be:	e02f      	b.n	8005620 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fe fc77 	bl	8003eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3318      	adds	r3, #24
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fc6e 	bl	8003eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <xTaskIncrementTick+0x160>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d903      	bls.n	80055f0 <xTaskIncrementTick+0xd8>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	4a22      	ldr	r2, [pc, #136]	; (8005678 <xTaskIncrementTick+0x160>)
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <xTaskIncrementTick+0x164>)
 80055fe:	441a      	add	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7fe fbf9 	bl	8003dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <xTaskIncrementTick+0x168>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d3b8      	bcc.n	800558c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800561e:	e7b5      	b.n	800558c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005620:	4b17      	ldr	r3, [pc, #92]	; (8005680 <xTaskIncrementTick+0x168>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	4915      	ldr	r1, [pc, #84]	; (800567c <xTaskIncrementTick+0x164>)
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d901      	bls.n	800563c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005638:	2301      	movs	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <xTaskIncrementTick+0x16c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005644:	2301      	movs	r3, #1
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e004      	b.n	8005654 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <xTaskIncrementTick+0x170>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <xTaskIncrementTick+0x170>)
 8005652:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005654:	697b      	ldr	r3, [r7, #20]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20001130 	.word	0x20001130
 8005664:	2000110c 	.word	0x2000110c
 8005668:	200010c0 	.word	0x200010c0
 800566c:	200010c4 	.word	0x200010c4
 8005670:	20001120 	.word	0x20001120
 8005674:	20001128 	.word	0x20001128
 8005678:	20001110 	.word	0x20001110
 800567c:	20000c38 	.word	0x20000c38
 8005680:	20000c34 	.word	0x20000c34
 8005684:	2000111c 	.word	0x2000111c
 8005688:	20001118 	.word	0x20001118

0800568c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005692:	4b28      	ldr	r3, [pc, #160]	; (8005734 <vTaskSwitchContext+0xa8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <vTaskSwitchContext+0xac>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056a0:	e041      	b.n	8005726 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80056a2:	4b25      	ldr	r3, [pc, #148]	; (8005738 <vTaskSwitchContext+0xac>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a8:	4b24      	ldr	r3, [pc, #144]	; (800573c <vTaskSwitchContext+0xb0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e010      	b.n	80056d2 <vTaskSwitchContext+0x46>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <vTaskSwitchContext+0x40>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	607b      	str	r3, [r7, #4]
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <vTaskSwitchContext+0x3e>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	491b      	ldr	r1, [pc, #108]	; (8005740 <vTaskSwitchContext+0xb4>)
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0e4      	beq.n	80056b0 <vTaskSwitchContext+0x24>
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4a13      	ldr	r2, [pc, #76]	; (8005740 <vTaskSwitchContext+0xb4>)
 80056f2:	4413      	add	r3, r2
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	605a      	str	r2, [r3, #4]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3308      	adds	r3, #8
 8005708:	429a      	cmp	r2, r3
 800570a:	d104      	bne.n	8005716 <vTaskSwitchContext+0x8a>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <vTaskSwitchContext+0xb8>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4a06      	ldr	r2, [pc, #24]	; (800573c <vTaskSwitchContext+0xb0>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20001130 	.word	0x20001130
 8005738:	2000111c 	.word	0x2000111c
 800573c:	20001110 	.word	0x20001110
 8005740:	20000c38 	.word	0x20000c38
 8005744:	20000c34 	.word	0x20000c34

08005748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <vTaskPlaceOnEventList+0x44>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3318      	adds	r3, #24
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fe fb65 	bl	8003e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800577c:	2101      	movs	r1, #1
 800577e:	6838      	ldr	r0, [r7, #0]
 8005780:	f000 fb7a 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000c34 	.word	0x20000c34

08005790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3318      	adds	r3, #24
 80057be:	4619      	mov	r1, r3
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7fe fb1c 	bl	8003dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295
 80057d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	68b8      	ldr	r0, [r7, #8]
 80057d6:	f000 fb4f 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
	}
 80057da:	bf00      	nop
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000c34 	.word	0x20000c34

080057e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3318      	adds	r3, #24
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fb4d 	bl	8003eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581e:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <xTaskRemoveFromEventList+0xb0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11d      	bne.n	8005862 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fb44 	bl	8003eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <xTaskRemoveFromEventList+0xb4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d903      	bls.n	8005844 <xTaskRemoveFromEventList+0x5c>
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a16      	ldr	r2, [pc, #88]	; (800589c <xTaskRemoveFromEventList+0xb4>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <xTaskRemoveFromEventList+0xb8>)
 8005852:	441a      	add	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe facf 	bl	8003dfe <vListInsertEnd>
 8005860:	e005      	b.n	800586e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	3318      	adds	r3, #24
 8005866:	4619      	mov	r1, r3
 8005868:	480e      	ldr	r0, [pc, #56]	; (80058a4 <xTaskRemoveFromEventList+0xbc>)
 800586a:	f7fe fac8 	bl	8003dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <xTaskRemoveFromEventList+0xc0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	429a      	cmp	r2, r3
 800587a:	d905      	bls.n	8005888 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <xTaskRemoveFromEventList+0xc4>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e001      	b.n	800588c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800588c:	697b      	ldr	r3, [r7, #20]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20001130 	.word	0x20001130
 800589c:	20001110 	.word	0x20001110
 80058a0:	20000c38 	.word	0x20000c38
 80058a4:	200010c8 	.word	0x200010c8
 80058a8:	20000c34 	.word	0x20000c34
 80058ac:	2000111c 	.word	0x2000111c

080058b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <vTaskInternalSetTimeOutState+0x24>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <vTaskInternalSetTimeOutState+0x28>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	605a      	str	r2, [r3, #4]
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20001120 	.word	0x20001120
 80058d8:	2000110c 	.word	0x2000110c

080058dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	613b      	str	r3, [r7, #16]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60fb      	str	r3, [r7, #12]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800591e:	f000 ff79 	bl	8006814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005922:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <xTaskCheckForTimeOut+0xbc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d102      	bne.n	8005942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e023      	b.n	800598a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <xTaskCheckForTimeOut+0xc0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d007      	beq.n	800595e <xTaskCheckForTimeOut+0x82>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d302      	bcc.n	800595e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e015      	b.n	800598a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	429a      	cmp	r2, r3
 8005966:	d20b      	bcs.n	8005980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ff9b 	bl	80058b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e004      	b.n	800598a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800598a:	f000 ff73 	bl	8006874 <vPortExitCritical>

	return xReturn;
 800598e:	69fb      	ldr	r3, [r7, #28]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2000110c 	.word	0x2000110c
 800599c:	20001120 	.word	0x20001120

080059a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059a4:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <vTaskMissedYield+0x14>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	2000111c 	.word	0x2000111c

080059b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059c0:	f000 f852 	bl	8005a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <prvIdleTask+0x28>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d9f9      	bls.n	80059c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <prvIdleTask+0x2c>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059dc:	e7f0      	b.n	80059c0 <prvIdleTask+0x8>
 80059de:	bf00      	nop
 80059e0:	20000c38 	.word	0x20000c38
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	e00c      	b.n	8005a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4a12      	ldr	r2, [pc, #72]	; (8005a48 <prvInitialiseTaskLists+0x60>)
 8005a00:	4413      	add	r3, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe f9ce 	bl	8003da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b37      	cmp	r3, #55	; 0x37
 8005a12:	d9ef      	bls.n	80059f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a14:	480d      	ldr	r0, [pc, #52]	; (8005a4c <prvInitialiseTaskLists+0x64>)
 8005a16:	f7fe f9c5 	bl	8003da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a1a:	480d      	ldr	r0, [pc, #52]	; (8005a50 <prvInitialiseTaskLists+0x68>)
 8005a1c:	f7fe f9c2 	bl	8003da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a20:	480c      	ldr	r0, [pc, #48]	; (8005a54 <prvInitialiseTaskLists+0x6c>)
 8005a22:	f7fe f9bf 	bl	8003da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a26:	480c      	ldr	r0, [pc, #48]	; (8005a58 <prvInitialiseTaskLists+0x70>)
 8005a28:	f7fe f9bc 	bl	8003da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a2c:	480b      	ldr	r0, [pc, #44]	; (8005a5c <prvInitialiseTaskLists+0x74>)
 8005a2e:	f7fe f9b9 	bl	8003da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <prvInitialiseTaskLists+0x78>)
 8005a34:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <prvInitialiseTaskLists+0x64>)
 8005a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <prvInitialiseTaskLists+0x7c>)
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <prvInitialiseTaskLists+0x68>)
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000c38 	.word	0x20000c38
 8005a4c:	20001098 	.word	0x20001098
 8005a50:	200010ac 	.word	0x200010ac
 8005a54:	200010c8 	.word	0x200010c8
 8005a58:	200010dc 	.word	0x200010dc
 8005a5c:	200010f4 	.word	0x200010f4
 8005a60:	200010c0 	.word	0x200010c0
 8005a64:	200010c4 	.word	0x200010c4

08005a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6e:	e019      	b.n	8005aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a70:	f000 fed0 	bl	8006814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a74:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <prvCheckTasksWaitingTermination+0x50>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fa19 	bl	8003eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a86:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <prvCheckTasksWaitingTermination+0x54>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <prvCheckTasksWaitingTermination+0x54>)
 8005a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <prvCheckTasksWaitingTermination+0x58>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <prvCheckTasksWaitingTermination+0x58>)
 8005a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a9a:	f000 feeb 	bl	8006874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f810 	bl	8005ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <prvCheckTasksWaitingTermination+0x58>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e1      	bne.n	8005a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200010dc 	.word	0x200010dc
 8005abc:	20001108 	.word	0x20001108
 8005ac0:	200010f0 	.word	0x200010f0

08005ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 f888 	bl	8006bf0 <vPortFree>
				vPortFree( pxTCB );
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 f885 	bl	8006bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ae6:	e018      	b.n	8005b1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d103      	bne.n	8005afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 f87c 	bl	8006bf0 <vPortFree>
	}
 8005af8:	e00f      	b.n	8005b1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d00a      	beq.n	8005b1a <prvDeleteTCB+0x56>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvDeleteTCB+0x54>
	}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <prvResetNextTaskUnblockTime+0x38>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <prvResetNextTaskUnblockTime+0x3c>)
 8005b36:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b3c:	e008      	b.n	8005b50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <prvResetNextTaskUnblockTime+0x38>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <prvResetNextTaskUnblockTime+0x3c>)
 8005b4e:	6013      	str	r3, [r2, #0]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	200010c0 	.word	0x200010c0
 8005b60:	20001128 	.word	0x20001128

08005b64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <xTaskGetSchedulerState+0x34>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b72:	2301      	movs	r3, #1
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	e008      	b.n	8005b8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b78:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <xTaskGetSchedulerState+0x38>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b80:	2302      	movs	r3, #2
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	e001      	b.n	8005b8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b86:	2300      	movs	r3, #0
 8005b88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b8a:	687b      	ldr	r3, [r7, #4]
	}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20001114 	.word	0x20001114
 8005b9c:	20001130 	.word	0x20001130

08005ba0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d051      	beq.n	8005c5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <xTaskPriorityInherit+0xc4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d241      	bcs.n	8005c48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	db06      	blt.n	8005bda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <xTaskPriorityInherit+0xc4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6959      	ldr	r1, [r3, #20]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <xTaskPriorityInherit+0xc8>)
 8005bec:	4413      	add	r3, r2
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	d122      	bne.n	8005c38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe f95e 	bl	8003eb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <xTaskPriorityInherit+0xc4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <xTaskPriorityInherit+0xcc>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d903      	bls.n	8005c1a <xTaskPriorityInherit+0x7a>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <xTaskPriorityInherit+0xcc>)
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4a10      	ldr	r2, [pc, #64]	; (8005c68 <xTaskPriorityInherit+0xc8>)
 8005c28:	441a      	add	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f7fe f8e4 	bl	8003dfe <vListInsertEnd>
 8005c36:	e004      	b.n	8005c42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <xTaskPriorityInherit+0xc4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c42:	2301      	movs	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e008      	b.n	8005c5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <xTaskPriorityInherit+0xc4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d201      	bcs.n	8005c5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c56:	2301      	movs	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
	}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000c34 	.word	0x20000c34
 8005c68:	20000c38 	.word	0x20000c38
 8005c6c:	20001110 	.word	0x20001110

08005c70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d056      	beq.n	8005d34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <xTaskPriorityDisinherit+0xd0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d00a      	beq.n	8005ca6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60bb      	str	r3, [r7, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d02c      	beq.n	8005d34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d128      	bne.n	8005d34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe f8e6 	bl	8003eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <xTaskPriorityDisinherit+0xd4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d903      	bls.n	8005d14 <xTaskPriorityDisinherit+0xa4>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <xTaskPriorityDisinherit+0xd4>)
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <xTaskPriorityDisinherit+0xd8>)
 8005d22:	441a      	add	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7fe f867 	bl	8003dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d34:	697b      	ldr	r3, [r7, #20]
	}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000c34 	.word	0x20000c34
 8005d44:	20001110 	.word	0x20001110
 8005d48:	20000c38 	.word	0x20000c38

08005d4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d06a      	beq.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60fb      	str	r3, [r7, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d902      	bls.n	8005d92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	e002      	b.n	8005d98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d04b      	beq.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d146      	bne.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005dac:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d10a      	bne.n	8005dcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	60bb      	str	r3, [r7, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	e7fe      	b.n	8005dca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	db04      	blt.n	8005dea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	6959      	ldr	r1, [r3, #20]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005dfa:	4413      	add	r3, r2
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	d11c      	bne.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe f857 	bl	8003eb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d903      	bls.n	8005e1e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a07      	ldr	r2, [pc, #28]	; (8005e48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e2c:	441a      	add	r2, r3
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fd ffe2 	bl	8003dfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e3a:	bf00      	nop
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000c34 	.word	0x20000c34
 8005e48:	20000c38 	.word	0x20000c38
 8005e4c:	20001110 	.word	0x20001110

08005e50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e62:	3201      	adds	r2, #1
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005e66:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e68:	681b      	ldr	r3, [r3, #0]
	}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	20000c34 	.word	0x20000c34

08005e78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e88:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe f812 	bl	8003eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d10a      	bne.n	8005eb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea2:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4819      	ldr	r0, [pc, #100]	; (8005f10 <prvAddCurrentTaskToDelayedList+0x98>)
 8005eac:	f7fd ffa7 	bl	8003dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005eb0:	e026      	b.n	8005f00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d209      	bcs.n	8005ede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7fd ffb5 	bl	8003e46 <vListInsert>
}
 8005edc:	e010      	b.n	8005f00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ede:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fd ffab 	bl	8003e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d202      	bcs.n	8005f00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005efa:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	2000110c 	.word	0x2000110c
 8005f0c:	20000c34 	.word	0x20000c34
 8005f10:	200010f4 	.word	0x200010f4
 8005f14:	200010c4 	.word	0x200010c4
 8005f18:	200010c0 	.word	0x200010c0
 8005f1c:	20001128 	.word	0x20001128

08005f20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f2a:	f000 fb07 	bl	800653c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f2e:	4b1c      	ldr	r3, [pc, #112]	; (8005fa0 <xTimerCreateTimerTask+0x80>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d021      	beq.n	8005f7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f3e:	1d3a      	adds	r2, r7, #4
 8005f40:	f107 0108 	add.w	r1, r7, #8
 8005f44:	f107 030c 	add.w	r3, r7, #12
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fd ff11 	bl	8003d70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	9202      	str	r2, [sp, #8]
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	2302      	movs	r3, #2
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	460a      	mov	r2, r1
 8005f60:	4910      	ldr	r1, [pc, #64]	; (8005fa4 <xTimerCreateTimerTask+0x84>)
 8005f62:	4811      	ldr	r0, [pc, #68]	; (8005fa8 <xTimerCreateTimerTask+0x88>)
 8005f64:	f7fe ffe0 	bl	8004f28 <xTaskCreateStatic>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	4a10      	ldr	r2, [pc, #64]	; (8005fac <xTimerCreateTimerTask+0x8c>)
 8005f6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <xTimerCreateTimerTask+0x8c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f76:	2301      	movs	r3, #1
 8005f78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	613b      	str	r3, [r7, #16]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f96:	697b      	ldr	r3, [r7, #20]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20001164 	.word	0x20001164
 8005fa4:	080077f0 	.word	0x080077f0
 8005fa8:	080060e5 	.word	0x080060e5
 8005fac:	20001168 	.word	0x20001168

08005fb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <xTimerGenericCommand+0x2e>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	623b      	str	r3, [r7, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fde:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <xTimerGenericCommand+0x98>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d02a      	beq.n	800603c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	dc18      	bgt.n	800602a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ff8:	f7ff fdb4 	bl	8005b64 <xTaskGetSchedulerState>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d109      	bne.n	8006016 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006002:	4b11      	ldr	r3, [pc, #68]	; (8006048 <xTimerGenericCommand+0x98>)
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f107 0110 	add.w	r1, r7, #16
 800600a:	2300      	movs	r3, #0
 800600c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600e:	f7fe f925 	bl	800425c <xQueueGenericSend>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24
 8006014:	e012      	b.n	800603c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <xTimerGenericCommand+0x98>)
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	f107 0110 	add.w	r1, r7, #16
 800601e:	2300      	movs	r3, #0
 8006020:	2200      	movs	r2, #0
 8006022:	f7fe f91b 	bl	800425c <xQueueGenericSend>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24
 8006028:	e008      	b.n	800603c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <xTimerGenericCommand+0x98>)
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	f107 0110 	add.w	r1, r7, #16
 8006032:	2300      	movs	r3, #0
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	f7fe fa0f 	bl	8004458 <xQueueGenericSendFromISR>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800603e:	4618      	mov	r0, r3
 8006040:	3728      	adds	r7, #40	; 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20001164 	.word	0x20001164

0800604c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <prvProcessExpiredTimer+0x94>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	3304      	adds	r3, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f7fd ff27 	bl	8003eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d022      	beq.n	80060be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	18d1      	adds	r1, r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	6978      	ldr	r0, [r7, #20]
 8006086:	f000 f8d1 	bl	800622c <prvInsertTimerInActiveList>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01f      	beq.n	80060d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006090:	2300      	movs	r3, #0
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	2300      	movs	r3, #0
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	2100      	movs	r1, #0
 800609a:	6978      	ldr	r0, [r7, #20]
 800609c:	f7ff ff88 	bl	8005fb0 <xTimerGenericCommand>
 80060a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d113      	bne.n	80060d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	60fb      	str	r3, [r7, #12]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	6978      	ldr	r0, [r7, #20]
 80060d6:	4798      	blx	r3
}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2000115c 	.word	0x2000115c

080060e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060ec:	f107 0308 	add.w	r3, r7, #8
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 f857 	bl	80061a4 <prvGetNextExpireTime>
 80060f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4619      	mov	r1, r3
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 f803 	bl	8006108 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006102:	f000 f8d5 	bl	80062b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006106:	e7f1      	b.n	80060ec <prvTimerTask+0x8>

08006108 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006112:	f7ff f945 	bl	80053a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006116:	f107 0308 	add.w	r3, r7, #8
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f866 	bl	80061ec <prvSampleTimeNow>
 8006120:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d130      	bne.n	800618a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <prvProcessTimerOrBlockTask+0x3c>
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	429a      	cmp	r2, r3
 8006134:	d806      	bhi.n	8006144 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006136:	f7ff f941 	bl	80053bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff ff85 	bl	800604c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006142:	e024      	b.n	800618e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800614a:	4b13      	ldr	r3, [pc, #76]	; (8006198 <prvProcessTimerOrBlockTask+0x90>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <prvProcessTimerOrBlockTask+0x50>
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <prvProcessTimerOrBlockTask+0x52>
 8006158:	2300      	movs	r3, #0
 800615a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800615c:	4b0f      	ldr	r3, [pc, #60]	; (800619c <prvProcessTimerOrBlockTask+0x94>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	4619      	mov	r1, r3
 800616a:	f7fe fea9 	bl	8004ec0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800616e:	f7ff f925 	bl	80053bc <xTaskResumeAll>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <prvProcessTimerOrBlockTask+0x98>)
 800617a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	f3bf 8f6f 	isb	sy
}
 8006188:	e001      	b.n	800618e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800618a:	f7ff f917 	bl	80053bc <xTaskResumeAll>
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20001160 	.word	0x20001160
 800619c:	20001164 	.word	0x20001164
 80061a0:	e000ed04 	.word	0xe000ed04

080061a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <prvGetNextExpireTime+0x44>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <prvGetNextExpireTime+0x16>
 80061b6:	2201      	movs	r2, #1
 80061b8:	e000      	b.n	80061bc <prvGetNextExpireTime+0x18>
 80061ba:	2200      	movs	r2, #0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <prvGetNextExpireTime+0x44>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	e001      	b.n	80061d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	2000115c 	.word	0x2000115c

080061ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061f4:	f7ff f980 	bl	80054f8 <xTaskGetTickCount>
 80061f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <prvSampleTimeNow+0x3c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	429a      	cmp	r2, r3
 8006202:	d205      	bcs.n	8006210 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006204:	f000 f936 	bl	8006474 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e002      	b.n	8006216 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006216:	4a04      	ldr	r2, [pc, #16]	; (8006228 <prvSampleTimeNow+0x3c>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	2000116c 	.word	0x2000116c

0800622c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	429a      	cmp	r2, r3
 8006250:	d812      	bhi.n	8006278 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e01b      	b.n	800629e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006266:	4b10      	ldr	r3, [pc, #64]	; (80062a8 <prvInsertTimerInActiveList+0x7c>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fd fde8 	bl	8003e46 <vListInsert>
 8006276:	e012      	b.n	800629e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d206      	bcs.n	800628e <prvInsertTimerInActiveList+0x62>
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d302      	bcc.n	800628e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006288:	2301      	movs	r3, #1
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e007      	b.n	800629e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800628e:	4b07      	ldr	r3, [pc, #28]	; (80062ac <prvInsertTimerInActiveList+0x80>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fd fdd4 	bl	8003e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800629e:	697b      	ldr	r3, [r7, #20]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20001160 	.word	0x20001160
 80062ac:	2000115c 	.word	0x2000115c

080062b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08e      	sub	sp, #56	; 0x38
 80062b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062b6:	e0ca      	b.n	800644e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da18      	bge.n	80062f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	3304      	adds	r3, #4
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	61fb      	str	r3, [r7, #28]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e6:	6850      	ldr	r0, [r2, #4]
 80062e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ea:	6892      	ldr	r2, [r2, #8]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f2c0 80ab 	blt.w	800644e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	3304      	adds	r3, #4
 8006308:	4618      	mov	r0, r3
 800630a:	f7fd fdd5 	bl	8003eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800630e:	463b      	mov	r3, r7
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ff6b 	bl	80061ec <prvSampleTimeNow>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b09      	cmp	r3, #9
 800631c:	f200 8096 	bhi.w	800644c <prvProcessReceivedCommands+0x19c>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <prvProcessReceivedCommands+0x78>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006351 	.word	0x08006351
 800632c:	08006351 	.word	0x08006351
 8006330:	08006351 	.word	0x08006351
 8006334:	080063c5 	.word	0x080063c5
 8006338:	080063d9 	.word	0x080063d9
 800633c:	08006423 	.word	0x08006423
 8006340:	08006351 	.word	0x08006351
 8006344:	08006351 	.word	0x08006351
 8006348:	080063c5 	.word	0x080063c5
 800634c:	080063d9 	.word	0x080063d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	b2da      	uxtb	r2, r3
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	18d1      	adds	r1, r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006370:	f7ff ff5c 	bl	800622c <prvInsertTimerInActiveList>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d069      	beq.n	800644e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006380:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05e      	beq.n	800644e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	441a      	add	r2, r3
 8006398:	2300      	movs	r3, #0
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	2300      	movs	r3, #0
 800639e:	2100      	movs	r1, #0
 80063a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a2:	f7ff fe05 	bl	8005fb0 <xTimerGenericCommand>
 80063a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d14f      	bne.n	800644e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	61bb      	str	r3, [r7, #24]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063d6:	e03a      	b.n	800644e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	617b      	str	r3, [r7, #20]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	18d1      	adds	r1, r2, r3
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641c:	f7ff ff06 	bl	800622c <prvInsertTimerInActiveList>
					break;
 8006420:	e015      	b.n	800644e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d103      	bne.n	8006438 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006432:	f000 fbdd 	bl	8006bf0 <vPortFree>
 8006436:	e00a      	b.n	800644e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800644a:	e000      	b.n	800644e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800644c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <prvProcessReceivedCommands+0x1c0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	1d39      	adds	r1, r7, #4
 8006454:	2200      	movs	r2, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe f926 	bl	80046a8 <xQueueReceive>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	f47f af2a 	bne.w	80062b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3730      	adds	r7, #48	; 0x30
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20001164 	.word	0x20001164

08006474 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800647a:	e048      	b.n	800650e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800647c:	4b2d      	ldr	r3, [pc, #180]	; (8006534 <prvSwitchTimerLists+0xc0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006486:	4b2b      	ldr	r3, [pc, #172]	; (8006534 <prvSwitchTimerLists+0xc0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3304      	adds	r3, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f7fd fd0f 	bl	8003eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d02e      	beq.n	800650e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4413      	add	r3, r2
 80064b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d90e      	bls.n	80064e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064ce:	4b19      	ldr	r3, [pc, #100]	; (8006534 <prvSwitchTimerLists+0xc0>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7fd fcb4 	bl	8003e46 <vListInsert>
 80064de:	e016      	b.n	800650e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064e0:	2300      	movs	r3, #0
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	2100      	movs	r1, #0
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff fd60 	bl	8005fb0 <xTimerGenericCommand>
 80064f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	603b      	str	r3, [r7, #0]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800650e:	4b09      	ldr	r3, [pc, #36]	; (8006534 <prvSwitchTimerLists+0xc0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1b1      	bne.n	800647c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <prvSwitchTimerLists+0xc0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <prvSwitchTimerLists+0xc4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a04      	ldr	r2, [pc, #16]	; (8006534 <prvSwitchTimerLists+0xc0>)
 8006524:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006526:	4a04      	ldr	r2, [pc, #16]	; (8006538 <prvSwitchTimerLists+0xc4>)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6013      	str	r3, [r2, #0]
}
 800652c:	bf00      	nop
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	2000115c 	.word	0x2000115c
 8006538:	20001160 	.word	0x20001160

0800653c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006542:	f000 f967 	bl	8006814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006546:	4b15      	ldr	r3, [pc, #84]	; (800659c <prvCheckForValidListAndQueue+0x60>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d120      	bne.n	8006590 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800654e:	4814      	ldr	r0, [pc, #80]	; (80065a0 <prvCheckForValidListAndQueue+0x64>)
 8006550:	f7fd fc28 	bl	8003da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006554:	4813      	ldr	r0, [pc, #76]	; (80065a4 <prvCheckForValidListAndQueue+0x68>)
 8006556:	f7fd fc25 	bl	8003da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800655a:	4b13      	ldr	r3, [pc, #76]	; (80065a8 <prvCheckForValidListAndQueue+0x6c>)
 800655c:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <prvCheckForValidListAndQueue+0x64>)
 800655e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006560:	4b12      	ldr	r3, [pc, #72]	; (80065ac <prvCheckForValidListAndQueue+0x70>)
 8006562:	4a10      	ldr	r2, [pc, #64]	; (80065a4 <prvCheckForValidListAndQueue+0x68>)
 8006564:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006566:	2300      	movs	r3, #0
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <prvCheckForValidListAndQueue+0x74>)
 800656c:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <prvCheckForValidListAndQueue+0x78>)
 800656e:	2110      	movs	r1, #16
 8006570:	200a      	movs	r0, #10
 8006572:	f7fd fd33 	bl	8003fdc <xQueueGenericCreateStatic>
 8006576:	4603      	mov	r3, r0
 8006578:	4a08      	ldr	r2, [pc, #32]	; (800659c <prvCheckForValidListAndQueue+0x60>)
 800657a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800657c:	4b07      	ldr	r3, [pc, #28]	; (800659c <prvCheckForValidListAndQueue+0x60>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <prvCheckForValidListAndQueue+0x60>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	490b      	ldr	r1, [pc, #44]	; (80065b8 <prvCheckForValidListAndQueue+0x7c>)
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fc44 	bl	8004e18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006590:	f000 f970 	bl	8006874 <vPortExitCritical>
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20001164 	.word	0x20001164
 80065a0:	20001134 	.word	0x20001134
 80065a4:	20001148 	.word	0x20001148
 80065a8:	2000115c 	.word	0x2000115c
 80065ac:	20001160 	.word	0x20001160
 80065b0:	20001210 	.word	0x20001210
 80065b4:	20001170 	.word	0x20001170
 80065b8:	080077f8 	.word	0x080077f8

080065bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3b04      	subs	r3, #4
 80065cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b04      	subs	r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065ec:	4a0c      	ldr	r2, [pc, #48]	; (8006620 <pxPortInitialiseStack+0x64>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b14      	subs	r3, #20
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b04      	subs	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f06f 0202 	mvn.w	r2, #2
 800660a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3b20      	subs	r3, #32
 8006610:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	08006625 	.word	0x08006625

08006624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <prvTaskExitError+0x54>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d00a      	beq.n	800664e <prvTaskExitError+0x2a>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	60fb      	str	r3, [r7, #12]
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <prvTaskExitError+0x28>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60bb      	str	r3, [r7, #8]
}
 8006660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006662:	bf00      	nop
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0fc      	beq.n	8006664 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20000014 	.word	0x20000014
 800667c:	00000000 	.word	0x00000000

08006680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <pxCurrentTCBConst2>)
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6808      	ldr	r0, [r1, #0]
 8006686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	f380 8809 	msr	PSP, r0
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	4770      	bx	lr
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst2>:
 80066a0:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066a8:	4808      	ldr	r0, [pc, #32]	; (80066cc <prvPortStartFirstTask+0x24>)
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f380 8808 	msr	MSP, r0
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8814 	msr	CONTROL, r0
 80066ba:	b662      	cpsie	i
 80066bc:	b661      	cpsie	f
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	df00      	svc	0
 80066c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ca:	bf00      	nop
 80066cc:	e000ed08 	.word	0xe000ed08

080066d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066d6:	4b46      	ldr	r3, [pc, #280]	; (80067f0 <xPortStartScheduler+0x120>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a46      	ldr	r2, [pc, #280]	; (80067f4 <xPortStartScheduler+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10a      	bne.n	80066f6 <xPortStartScheduler+0x26>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	613b      	str	r3, [r7, #16]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066f6:	4b3e      	ldr	r3, [pc, #248]	; (80067f0 <xPortStartScheduler+0x120>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3f      	ldr	r2, [pc, #252]	; (80067f8 <xPortStartScheduler+0x128>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10a      	bne.n	8006716 <xPortStartScheduler+0x46>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006716:	4b39      	ldr	r3, [pc, #228]	; (80067fc <xPortStartScheduler+0x12c>)
 8006718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	22ff      	movs	r2, #255	; 0xff
 8006726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <xPortStartScheduler+0x130>)
 800673c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <xPortStartScheduler+0x134>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006744:	e009      	b.n	800675a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006746:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <xPortStartScheduler+0x134>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	4a2d      	ldr	r2, [pc, #180]	; (8006804 <xPortStartScheduler+0x134>)
 800674e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	b2db      	uxtb	r3, r3
 8006758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d0ef      	beq.n	8006746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <xPortStartScheduler+0x134>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1c3 0307 	rsb	r3, r3, #7
 800676e:	2b04      	cmp	r3, #4
 8006770:	d00a      	beq.n	8006788 <xPortStartScheduler+0xb8>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60bb      	str	r3, [r7, #8]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006788:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <xPortStartScheduler+0x134>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <xPortStartScheduler+0x134>)
 8006790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006792:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <xPortStartScheduler+0x134>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800679a:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <xPortStartScheduler+0x134>)
 800679c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067a6:	4b18      	ldr	r3, [pc, #96]	; (8006808 <xPortStartScheduler+0x138>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <xPortStartScheduler+0x138>)
 80067ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <xPortStartScheduler+0x138>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a14      	ldr	r2, [pc, #80]	; (8006808 <xPortStartScheduler+0x138>)
 80067b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067be:	f000 f8dd 	bl	800697c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067c2:	4b12      	ldr	r3, [pc, #72]	; (800680c <xPortStartScheduler+0x13c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067c8:	f000 f8fc 	bl	80069c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <xPortStartScheduler+0x140>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0f      	ldr	r2, [pc, #60]	; (8006810 <xPortStartScheduler+0x140>)
 80067d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067d8:	f7ff ff66 	bl	80066a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067dc:	f7fe ff56 	bl	800568c <vTaskSwitchContext>
	prvTaskExitError();
 80067e0:	f7ff ff20 	bl	8006624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	e000ed00 	.word	0xe000ed00
 80067f4:	410fc271 	.word	0x410fc271
 80067f8:	410fc270 	.word	0x410fc270
 80067fc:	e000e400 	.word	0xe000e400
 8006800:	20001260 	.word	0x20001260
 8006804:	20001264 	.word	0x20001264
 8006808:	e000ed20 	.word	0xe000ed20
 800680c:	20000014 	.word	0x20000014
 8006810:	e000ef34 	.word	0xe000ef34

08006814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	607b      	str	r3, [r7, #4]
}
 800682c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800682e:	4b0f      	ldr	r3, [pc, #60]	; (800686c <vPortEnterCritical+0x58>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	4a0d      	ldr	r2, [pc, #52]	; (800686c <vPortEnterCritical+0x58>)
 8006836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <vPortEnterCritical+0x58>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d10f      	bne.n	8006860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <vPortEnterCritical+0x5c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <vPortEnterCritical+0x4c>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	603b      	str	r3, [r7, #0]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <vPortEnterCritical+0x4a>
	}
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20000014 	.word	0x20000014
 8006870:	e000ed04 	.word	0xe000ed04

08006874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800687a:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <vPortExitCritical+0x50>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <vPortExitCritical+0x24>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	607b      	str	r3, [r7, #4]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <vPortExitCritical+0x50>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3b01      	subs	r3, #1
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <vPortExitCritical+0x50>)
 80068a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068a2:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <vPortExitCritical+0x50>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <vPortExitCritical+0x42>
 80068aa:	2300      	movs	r3, #0
 80068ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	f383 8811 	msr	BASEPRI, r3
}
 80068b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000014 	.word	0x20000014
	...

080068d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068d0:	f3ef 8009 	mrs	r0, PSP
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <pxCurrentTCBConst>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f01e 0f10 	tst.w	lr, #16
 80068e0:	bf08      	it	eq
 80068e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	6010      	str	r0, [r2, #0]
 80068ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068f4:	f380 8811 	msr	BASEPRI, r0
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f7fe fec4 	bl	800568c <vTaskSwitchContext>
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f380 8811 	msr	BASEPRI, r0
 800690c:	bc09      	pop	{r0, r3}
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	6808      	ldr	r0, [r1, #0]
 8006912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	f01e 0f10 	tst.w	lr, #16
 800691a:	bf08      	it	eq
 800691c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006920:	f380 8809 	msr	PSP, r0
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst>:
 8006930:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006952:	f7fe fde1 	bl	8005518 <xTaskIncrementTick>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <xPortSysTickHandler+0x40>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vPortSetupTimerInterrupt+0x34>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <vPortSetupTimerInterrupt+0x38>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <vPortSetupTimerInterrupt+0x3c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <vPortSetupTimerInterrupt+0x40>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <vPortSetupTimerInterrupt+0x44>)
 800699a:	3b01      	subs	r3, #1
 800699c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800699e:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <vPortSetupTimerInterrupt+0x34>)
 80069a0:	2207      	movs	r2, #7
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000e010 	.word	0xe000e010
 80069b4:	e000e018 	.word	0xe000e018
 80069b8:	20000008 	.word	0x20000008
 80069bc:	10624dd3 	.word	0x10624dd3
 80069c0:	e000e014 	.word	0xe000e014

080069c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069d4 <vPortEnableVFP+0x10>
 80069c8:	6801      	ldr	r1, [r0, #0]
 80069ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069ce:	6001      	str	r1, [r0, #0]
 80069d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069d2:	bf00      	nop
 80069d4:	e000ed88 	.word	0xe000ed88

080069d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069de:	f3ef 8305 	mrs	r3, IPSR
 80069e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d914      	bls.n	8006a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ea:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <vPortValidateInterruptPriority+0x70>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069f4:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <vPortValidateInterruptPriority+0x74>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	7afa      	ldrb	r2, [r7, #11]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d20a      	bcs.n	8006a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <vPortValidateInterruptPriority+0x78>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <vPortValidateInterruptPriority+0x7c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d90a      	bls.n	8006a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	603b      	str	r3, [r7, #0]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <vPortValidateInterruptPriority+0x60>
	}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	e000e3f0 	.word	0xe000e3f0
 8006a4c:	20001260 	.word	0x20001260
 8006a50:	e000ed0c 	.word	0xe000ed0c
 8006a54:	20001264 	.word	0x20001264

08006a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a64:	f7fe fc9c 	bl	80053a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a68:	4b5b      	ldr	r3, [pc, #364]	; (8006bd8 <pvPortMalloc+0x180>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a70:	f000 f920 	bl	8006cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a74:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <pvPortMalloc+0x184>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 8093 	bne.w	8006ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01d      	beq.n	8006ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a88:	2208      	movs	r2, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d014      	beq.n	8006ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f023 0307 	bic.w	r3, r3, #7
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	617b      	str	r3, [r7, #20]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d06e      	beq.n	8006ba8 <pvPortMalloc+0x150>
 8006aca:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <pvPortMalloc+0x188>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d869      	bhi.n	8006ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ad4:	4b43      	ldr	r3, [pc, #268]	; (8006be4 <pvPortMalloc+0x18c>)
 8006ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ad8:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <pvPortMalloc+0x18c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ade:	e004      	b.n	8006aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d903      	bls.n	8006afc <pvPortMalloc+0xa4>
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f1      	bne.n	8006ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006afc:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <pvPortMalloc+0x180>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d050      	beq.n	8006ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	2308      	movs	r3, #8
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d91f      	bls.n	8006b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <pvPortMalloc+0xf8>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	613b      	str	r3, [r7, #16]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	1ad2      	subs	r2, r2, r3
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b62:	69b8      	ldr	r0, [r7, #24]
 8006b64:	f000 f908 	bl	8006d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <pvPortMalloc+0x188>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <pvPortMalloc+0x188>)
 8006b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <pvPortMalloc+0x188>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <pvPortMalloc+0x190>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d203      	bcs.n	8006b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b82:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <pvPortMalloc+0x188>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <pvPortMalloc+0x190>)
 8006b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <pvPortMalloc+0x184>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <pvPortMalloc+0x194>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a11      	ldr	r2, [pc, #68]	; (8006bec <pvPortMalloc+0x194>)
 8006ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ba8:	f7fe fc08 	bl	80053bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <pvPortMalloc+0x174>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60fb      	str	r3, [r7, #12]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <pvPortMalloc+0x172>
	return pvReturn;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3728      	adds	r7, #40	; 0x28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20001e28 	.word	0x20001e28
 8006bdc:	20001e3c 	.word	0x20001e3c
 8006be0:	20001e2c 	.word	0x20001e2c
 8006be4:	20001e20 	.word	0x20001e20
 8006be8:	20001e30 	.word	0x20001e30
 8006bec:	20001e34 	.word	0x20001e34

08006bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d04d      	beq.n	8006c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c02:	2308      	movs	r3, #8
 8006c04:	425b      	negs	r3, r3
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4413      	add	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <vPortFree+0xb8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <vPortFree+0x44>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60fb      	str	r3, [r7, #12]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <vPortFree+0x62>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60bb      	str	r3, [r7, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <vPortFree+0xb8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01e      	beq.n	8006c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11a      	bne.n	8006c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <vPortFree+0xb8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c78:	f7fe fb92 	bl	80053a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <vPortFree+0xbc>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4413      	add	r3, r2
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <vPortFree+0xbc>)
 8006c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f000 f874 	bl	8006d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c90:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <vPortFree+0xc0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	4a06      	ldr	r2, [pc, #24]	; (8006cb0 <vPortFree+0xc0>)
 8006c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c9a:	f7fe fb8f 	bl	80053bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c9e:	bf00      	nop
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20001e3c 	.word	0x20001e3c
 8006cac:	20001e2c 	.word	0x20001e2c
 8006cb0:	20001e38 	.word	0x20001e38

08006cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cc0:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <prvHeapInit+0xac>)
 8006cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00c      	beq.n	8006ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3307      	adds	r3, #7
 8006cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0307 	bic.w	r3, r3, #7
 8006cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	4a1f      	ldr	r2, [pc, #124]	; (8006d60 <prvHeapInit+0xac>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <prvHeapInit+0xb0>)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cf2:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <prvHeapInit+0xb0>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d00:	2208      	movs	r2, #8
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <prvHeapInit+0xb4>)
 8006d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <prvHeapInit+0xb4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <prvHeapInit+0xb4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvHeapInit+0xb4>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <prvHeapInit+0xb8>)
 8006d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <prvHeapInit+0xbc>)
 8006d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <prvHeapInit+0xc0>)
 8006d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20001268 	.word	0x20001268
 8006d64:	20001e20 	.word	0x20001e20
 8006d68:	20001e28 	.word	0x20001e28
 8006d6c:	20001e30 	.word	0x20001e30
 8006d70:	20001e2c 	.word	0x20001e2c
 8006d74:	20001e3c 	.word	0x20001e3c

08006d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d80:	4b28      	ldr	r3, [pc, #160]	; (8006e24 <prvInsertBlockIntoFreeList+0xac>)
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e002      	b.n	8006d8c <prvInsertBlockIntoFreeList+0x14>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d8f7      	bhi.n	8006d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d108      	bne.n	8006dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d118      	bne.n	8006e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d00d      	beq.n	8006df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	441a      	add	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e008      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvInsertBlockIntoFreeList+0xb0>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e003      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d002      	beq.n	8006e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20001e20 	.word	0x20001e20
 8006e28:	20001e28 	.word	0x20001e28

08006e2c <siprintf>:
 8006e2c:	b40e      	push	{r1, r2, r3}
 8006e2e:	b500      	push	{lr}
 8006e30:	b09c      	sub	sp, #112	; 0x70
 8006e32:	ab1d      	add	r3, sp, #116	; 0x74
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	9006      	str	r0, [sp, #24]
 8006e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e3c:	4809      	ldr	r0, [pc, #36]	; (8006e64 <siprintf+0x38>)
 8006e3e:	9107      	str	r1, [sp, #28]
 8006e40:	9104      	str	r1, [sp, #16]
 8006e42:	4909      	ldr	r1, [pc, #36]	; (8006e68 <siprintf+0x3c>)
 8006e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e48:	9105      	str	r1, [sp, #20]
 8006e4a:	6800      	ldr	r0, [r0, #0]
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	a902      	add	r1, sp, #8
 8006e50:	f000 f9ba 	bl	80071c8 <_svfiprintf_r>
 8006e54:	9b02      	ldr	r3, [sp, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	b01c      	add	sp, #112	; 0x70
 8006e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e60:	b003      	add	sp, #12
 8006e62:	4770      	bx	lr
 8006e64:	20000064 	.word	0x20000064
 8006e68:	ffff0208 	.word	0xffff0208

08006e6c <memmove>:
 8006e6c:	4288      	cmp	r0, r1
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	eb01 0402 	add.w	r4, r1, r2
 8006e74:	d902      	bls.n	8006e7c <memmove+0x10>
 8006e76:	4284      	cmp	r4, r0
 8006e78:	4623      	mov	r3, r4
 8006e7a:	d807      	bhi.n	8006e8c <memmove+0x20>
 8006e7c:	1e43      	subs	r3, r0, #1
 8006e7e:	42a1      	cmp	r1, r4
 8006e80:	d008      	beq.n	8006e94 <memmove+0x28>
 8006e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e8a:	e7f8      	b.n	8006e7e <memmove+0x12>
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4601      	mov	r1, r0
 8006e90:	428a      	cmp	r2, r1
 8006e92:	d100      	bne.n	8006e96 <memmove+0x2a>
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e9e:	e7f7      	b.n	8006e90 <memmove+0x24>

08006ea0 <memset>:
 8006ea0:	4402      	add	r2, r0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d100      	bne.n	8006eaa <memset+0xa>
 8006ea8:	4770      	bx	lr
 8006eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006eae:	e7f9      	b.n	8006ea4 <memset+0x4>

08006eb0 <__errno>:
 8006eb0:	4b01      	ldr	r3, [pc, #4]	; (8006eb8 <__errno+0x8>)
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000064 	.word	0x20000064

08006ebc <__libc_init_array>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	4d0d      	ldr	r5, [pc, #52]	; (8006ef4 <__libc_init_array+0x38>)
 8006ec0:	4c0d      	ldr	r4, [pc, #52]	; (8006ef8 <__libc_init_array+0x3c>)
 8006ec2:	1b64      	subs	r4, r4, r5
 8006ec4:	10a4      	asrs	r4, r4, #2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	42a6      	cmp	r6, r4
 8006eca:	d109      	bne.n	8006ee0 <__libc_init_array+0x24>
 8006ecc:	4d0b      	ldr	r5, [pc, #44]	; (8006efc <__libc_init_array+0x40>)
 8006ece:	4c0c      	ldr	r4, [pc, #48]	; (8006f00 <__libc_init_array+0x44>)
 8006ed0:	f000 fc50 	bl	8007774 <_init>
 8006ed4:	1b64      	subs	r4, r4, r5
 8006ed6:	10a4      	asrs	r4, r4, #2
 8006ed8:	2600      	movs	r6, #0
 8006eda:	42a6      	cmp	r6, r4
 8006edc:	d105      	bne.n	8006eea <__libc_init_array+0x2e>
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee4:	4798      	blx	r3
 8006ee6:	3601      	adds	r6, #1
 8006ee8:	e7ee      	b.n	8006ec8 <__libc_init_array+0xc>
 8006eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eee:	4798      	blx	r3
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	e7f2      	b.n	8006eda <__libc_init_array+0x1e>
 8006ef4:	08008c68 	.word	0x08008c68
 8006ef8:	08008c68 	.word	0x08008c68
 8006efc:	08008c68 	.word	0x08008c68
 8006f00:	08008c6c 	.word	0x08008c6c

08006f04 <__retarget_lock_acquire_recursive>:
 8006f04:	4770      	bx	lr

08006f06 <__retarget_lock_release_recursive>:
 8006f06:	4770      	bx	lr

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <_free_r>:
 8006f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f26:	2900      	cmp	r1, #0
 8006f28:	d044      	beq.n	8006fb4 <_free_r+0x90>
 8006f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2e:	9001      	str	r0, [sp, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f1a1 0404 	sub.w	r4, r1, #4
 8006f36:	bfb8      	it	lt
 8006f38:	18e4      	addlt	r4, r4, r3
 8006f3a:	f000 f8df 	bl	80070fc <__malloc_lock>
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	; (8006fb8 <_free_r+0x94>)
 8006f40:	9801      	ldr	r0, [sp, #4]
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	b933      	cbnz	r3, 8006f54 <_free_r+0x30>
 8006f46:	6063      	str	r3, [r4, #4]
 8006f48:	6014      	str	r4, [r2, #0]
 8006f4a:	b003      	add	sp, #12
 8006f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f50:	f000 b8da 	b.w	8007108 <__malloc_unlock>
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	d908      	bls.n	8006f6a <_free_r+0x46>
 8006f58:	6825      	ldr	r5, [r4, #0]
 8006f5a:	1961      	adds	r1, r4, r5
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	bf01      	itttt	eq
 8006f60:	6819      	ldreq	r1, [r3, #0]
 8006f62:	685b      	ldreq	r3, [r3, #4]
 8006f64:	1949      	addeq	r1, r1, r5
 8006f66:	6021      	streq	r1, [r4, #0]
 8006f68:	e7ed      	b.n	8006f46 <_free_r+0x22>
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	b10b      	cbz	r3, 8006f74 <_free_r+0x50>
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	d9fa      	bls.n	8006f6a <_free_r+0x46>
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	1855      	adds	r5, r2, r1
 8006f78:	42a5      	cmp	r5, r4
 8006f7a:	d10b      	bne.n	8006f94 <_free_r+0x70>
 8006f7c:	6824      	ldr	r4, [r4, #0]
 8006f7e:	4421      	add	r1, r4
 8006f80:	1854      	adds	r4, r2, r1
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	6011      	str	r1, [r2, #0]
 8006f86:	d1e0      	bne.n	8006f4a <_free_r+0x26>
 8006f88:	681c      	ldr	r4, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	6053      	str	r3, [r2, #4]
 8006f8e:	440c      	add	r4, r1
 8006f90:	6014      	str	r4, [r2, #0]
 8006f92:	e7da      	b.n	8006f4a <_free_r+0x26>
 8006f94:	d902      	bls.n	8006f9c <_free_r+0x78>
 8006f96:	230c      	movs	r3, #12
 8006f98:	6003      	str	r3, [r0, #0]
 8006f9a:	e7d6      	b.n	8006f4a <_free_r+0x26>
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	1961      	adds	r1, r4, r5
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf04      	itt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	bf04      	itt	eq
 8006fac:	1949      	addeq	r1, r1, r5
 8006fae:	6021      	streq	r1, [r4, #0]
 8006fb0:	6054      	str	r4, [r2, #4]
 8006fb2:	e7ca      	b.n	8006f4a <_free_r+0x26>
 8006fb4:	b003      	add	sp, #12
 8006fb6:	bd30      	pop	{r4, r5, pc}
 8006fb8:	20001f80 	.word	0x20001f80

08006fbc <sbrk_aligned>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4e0e      	ldr	r6, [pc, #56]	; (8006ff8 <sbrk_aligned+0x3c>)
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	6831      	ldr	r1, [r6, #0]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	b911      	cbnz	r1, 8006fce <sbrk_aligned+0x12>
 8006fc8:	f000 fb8c 	bl	80076e4 <_sbrk_r>
 8006fcc:	6030      	str	r0, [r6, #0]
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f000 fb87 	bl	80076e4 <_sbrk_r>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	d00a      	beq.n	8006ff0 <sbrk_aligned+0x34>
 8006fda:	1cc4      	adds	r4, r0, #3
 8006fdc:	f024 0403 	bic.w	r4, r4, #3
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d007      	beq.n	8006ff4 <sbrk_aligned+0x38>
 8006fe4:	1a21      	subs	r1, r4, r0
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 fb7c 	bl	80076e4 <_sbrk_r>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d101      	bne.n	8006ff4 <sbrk_aligned+0x38>
 8006ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	20001f84 	.word	0x20001f84

08006ffc <_malloc_r>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	1ccd      	adds	r5, r1, #3
 8007002:	f025 0503 	bic.w	r5, r5, #3
 8007006:	3508      	adds	r5, #8
 8007008:	2d0c      	cmp	r5, #12
 800700a:	bf38      	it	cc
 800700c:	250c      	movcc	r5, #12
 800700e:	2d00      	cmp	r5, #0
 8007010:	4607      	mov	r7, r0
 8007012:	db01      	blt.n	8007018 <_malloc_r+0x1c>
 8007014:	42a9      	cmp	r1, r5
 8007016:	d905      	bls.n	8007024 <_malloc_r+0x28>
 8007018:	230c      	movs	r3, #12
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	2600      	movs	r6, #0
 800701e:	4630      	mov	r0, r6
 8007020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007024:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070f8 <_malloc_r+0xfc>
 8007028:	f000 f868 	bl	80070fc <__malloc_lock>
 800702c:	f8d8 3000 	ldr.w	r3, [r8]
 8007030:	461c      	mov	r4, r3
 8007032:	bb5c      	cbnz	r4, 800708c <_malloc_r+0x90>
 8007034:	4629      	mov	r1, r5
 8007036:	4638      	mov	r0, r7
 8007038:	f7ff ffc0 	bl	8006fbc <sbrk_aligned>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	4604      	mov	r4, r0
 8007040:	d155      	bne.n	80070ee <_malloc_r+0xf2>
 8007042:	f8d8 4000 	ldr.w	r4, [r8]
 8007046:	4626      	mov	r6, r4
 8007048:	2e00      	cmp	r6, #0
 800704a:	d145      	bne.n	80070d8 <_malloc_r+0xdc>
 800704c:	2c00      	cmp	r4, #0
 800704e:	d048      	beq.n	80070e2 <_malloc_r+0xe6>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	4631      	mov	r1, r6
 8007054:	4638      	mov	r0, r7
 8007056:	eb04 0903 	add.w	r9, r4, r3
 800705a:	f000 fb43 	bl	80076e4 <_sbrk_r>
 800705e:	4581      	cmp	r9, r0
 8007060:	d13f      	bne.n	80070e2 <_malloc_r+0xe6>
 8007062:	6821      	ldr	r1, [r4, #0]
 8007064:	1a6d      	subs	r5, r5, r1
 8007066:	4629      	mov	r1, r5
 8007068:	4638      	mov	r0, r7
 800706a:	f7ff ffa7 	bl	8006fbc <sbrk_aligned>
 800706e:	3001      	adds	r0, #1
 8007070:	d037      	beq.n	80070e2 <_malloc_r+0xe6>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	442b      	add	r3, r5
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	f8d8 3000 	ldr.w	r3, [r8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d038      	beq.n	80070f2 <_malloc_r+0xf6>
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	42a2      	cmp	r2, r4
 8007084:	d12b      	bne.n	80070de <_malloc_r+0xe2>
 8007086:	2200      	movs	r2, #0
 8007088:	605a      	str	r2, [r3, #4]
 800708a:	e00f      	b.n	80070ac <_malloc_r+0xb0>
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	1b52      	subs	r2, r2, r5
 8007090:	d41f      	bmi.n	80070d2 <_malloc_r+0xd6>
 8007092:	2a0b      	cmp	r2, #11
 8007094:	d917      	bls.n	80070c6 <_malloc_r+0xca>
 8007096:	1961      	adds	r1, r4, r5
 8007098:	42a3      	cmp	r3, r4
 800709a:	6025      	str	r5, [r4, #0]
 800709c:	bf18      	it	ne
 800709e:	6059      	strne	r1, [r3, #4]
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	bf08      	it	eq
 80070a4:	f8c8 1000 	streq.w	r1, [r8]
 80070a8:	5162      	str	r2, [r4, r5]
 80070aa:	604b      	str	r3, [r1, #4]
 80070ac:	4638      	mov	r0, r7
 80070ae:	f104 060b 	add.w	r6, r4, #11
 80070b2:	f000 f829 	bl	8007108 <__malloc_unlock>
 80070b6:	f026 0607 	bic.w	r6, r6, #7
 80070ba:	1d23      	adds	r3, r4, #4
 80070bc:	1af2      	subs	r2, r6, r3
 80070be:	d0ae      	beq.n	800701e <_malloc_r+0x22>
 80070c0:	1b9b      	subs	r3, r3, r6
 80070c2:	50a3      	str	r3, [r4, r2]
 80070c4:	e7ab      	b.n	800701e <_malloc_r+0x22>
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	6862      	ldr	r2, [r4, #4]
 80070ca:	d1dd      	bne.n	8007088 <_malloc_r+0x8c>
 80070cc:	f8c8 2000 	str.w	r2, [r8]
 80070d0:	e7ec      	b.n	80070ac <_malloc_r+0xb0>
 80070d2:	4623      	mov	r3, r4
 80070d4:	6864      	ldr	r4, [r4, #4]
 80070d6:	e7ac      	b.n	8007032 <_malloc_r+0x36>
 80070d8:	4634      	mov	r4, r6
 80070da:	6876      	ldr	r6, [r6, #4]
 80070dc:	e7b4      	b.n	8007048 <_malloc_r+0x4c>
 80070de:	4613      	mov	r3, r2
 80070e0:	e7cc      	b.n	800707c <_malloc_r+0x80>
 80070e2:	230c      	movs	r3, #12
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4638      	mov	r0, r7
 80070e8:	f000 f80e 	bl	8007108 <__malloc_unlock>
 80070ec:	e797      	b.n	800701e <_malloc_r+0x22>
 80070ee:	6025      	str	r5, [r4, #0]
 80070f0:	e7dc      	b.n	80070ac <_malloc_r+0xb0>
 80070f2:	605b      	str	r3, [r3, #4]
 80070f4:	deff      	udf	#255	; 0xff
 80070f6:	bf00      	nop
 80070f8:	20001f80 	.word	0x20001f80

080070fc <__malloc_lock>:
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <__malloc_lock+0x8>)
 80070fe:	f7ff bf01 	b.w	8006f04 <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	20001f7c 	.word	0x20001f7c

08007108 <__malloc_unlock>:
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <__malloc_unlock+0x8>)
 800710a:	f7ff befc 	b.w	8006f06 <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	20001f7c 	.word	0x20001f7c

08007114 <__ssputs_r>:
 8007114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	688e      	ldr	r6, [r1, #8]
 800711a:	461f      	mov	r7, r3
 800711c:	42be      	cmp	r6, r7
 800711e:	680b      	ldr	r3, [r1, #0]
 8007120:	4682      	mov	sl, r0
 8007122:	460c      	mov	r4, r1
 8007124:	4690      	mov	r8, r2
 8007126:	d82c      	bhi.n	8007182 <__ssputs_r+0x6e>
 8007128:	898a      	ldrh	r2, [r1, #12]
 800712a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800712e:	d026      	beq.n	800717e <__ssputs_r+0x6a>
 8007130:	6965      	ldr	r5, [r4, #20]
 8007132:	6909      	ldr	r1, [r1, #16]
 8007134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007138:	eba3 0901 	sub.w	r9, r3, r1
 800713c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007140:	1c7b      	adds	r3, r7, #1
 8007142:	444b      	add	r3, r9
 8007144:	106d      	asrs	r5, r5, #1
 8007146:	429d      	cmp	r5, r3
 8007148:	bf38      	it	cc
 800714a:	461d      	movcc	r5, r3
 800714c:	0553      	lsls	r3, r2, #21
 800714e:	d527      	bpl.n	80071a0 <__ssputs_r+0x8c>
 8007150:	4629      	mov	r1, r5
 8007152:	f7ff ff53 	bl	8006ffc <_malloc_r>
 8007156:	4606      	mov	r6, r0
 8007158:	b360      	cbz	r0, 80071b4 <__ssputs_r+0xa0>
 800715a:	6921      	ldr	r1, [r4, #16]
 800715c:	464a      	mov	r2, r9
 800715e:	f7ff fed3 	bl	8006f08 <memcpy>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	6126      	str	r6, [r4, #16]
 8007170:	6165      	str	r5, [r4, #20]
 8007172:	444e      	add	r6, r9
 8007174:	eba5 0509 	sub.w	r5, r5, r9
 8007178:	6026      	str	r6, [r4, #0]
 800717a:	60a5      	str	r5, [r4, #8]
 800717c:	463e      	mov	r6, r7
 800717e:	42be      	cmp	r6, r7
 8007180:	d900      	bls.n	8007184 <__ssputs_r+0x70>
 8007182:	463e      	mov	r6, r7
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	4632      	mov	r2, r6
 8007188:	4641      	mov	r1, r8
 800718a:	f7ff fe6f 	bl	8006e6c <memmove>
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	1b9b      	subs	r3, r3, r6
 8007192:	60a3      	str	r3, [r4, #8]
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	4433      	add	r3, r6
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	2000      	movs	r0, #0
 800719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a0:	462a      	mov	r2, r5
 80071a2:	f000 faaf 	bl	8007704 <_realloc_r>
 80071a6:	4606      	mov	r6, r0
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d1e0      	bne.n	800716e <__ssputs_r+0x5a>
 80071ac:	6921      	ldr	r1, [r4, #16]
 80071ae:	4650      	mov	r0, sl
 80071b0:	f7ff feb8 	bl	8006f24 <_free_r>
 80071b4:	230c      	movs	r3, #12
 80071b6:	f8ca 3000 	str.w	r3, [sl]
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	e7e9      	b.n	800719c <__ssputs_r+0x88>

080071c8 <_svfiprintf_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	4698      	mov	r8, r3
 80071ce:	898b      	ldrh	r3, [r1, #12]
 80071d0:	061b      	lsls	r3, r3, #24
 80071d2:	b09d      	sub	sp, #116	; 0x74
 80071d4:	4607      	mov	r7, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	d50e      	bpl.n	80071fa <_svfiprintf_r+0x32>
 80071dc:	690b      	ldr	r3, [r1, #16]
 80071de:	b963      	cbnz	r3, 80071fa <_svfiprintf_r+0x32>
 80071e0:	2140      	movs	r1, #64	; 0x40
 80071e2:	f7ff ff0b 	bl	8006ffc <_malloc_r>
 80071e6:	6028      	str	r0, [r5, #0]
 80071e8:	6128      	str	r0, [r5, #16]
 80071ea:	b920      	cbnz	r0, 80071f6 <_svfiprintf_r+0x2e>
 80071ec:	230c      	movs	r3, #12
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	e0d0      	b.n	8007398 <_svfiprintf_r+0x1d0>
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	616b      	str	r3, [r5, #20]
 80071fa:	2300      	movs	r3, #0
 80071fc:	9309      	str	r3, [sp, #36]	; 0x24
 80071fe:	2320      	movs	r3, #32
 8007200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007204:	f8cd 800c 	str.w	r8, [sp, #12]
 8007208:	2330      	movs	r3, #48	; 0x30
 800720a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073b0 <_svfiprintf_r+0x1e8>
 800720e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007212:	f04f 0901 	mov.w	r9, #1
 8007216:	4623      	mov	r3, r4
 8007218:	469a      	mov	sl, r3
 800721a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800721e:	b10a      	cbz	r2, 8007224 <_svfiprintf_r+0x5c>
 8007220:	2a25      	cmp	r2, #37	; 0x25
 8007222:	d1f9      	bne.n	8007218 <_svfiprintf_r+0x50>
 8007224:	ebba 0b04 	subs.w	fp, sl, r4
 8007228:	d00b      	beq.n	8007242 <_svfiprintf_r+0x7a>
 800722a:	465b      	mov	r3, fp
 800722c:	4622      	mov	r2, r4
 800722e:	4629      	mov	r1, r5
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ff6f 	bl	8007114 <__ssputs_r>
 8007236:	3001      	adds	r0, #1
 8007238:	f000 80a9 	beq.w	800738e <_svfiprintf_r+0x1c6>
 800723c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800723e:	445a      	add	r2, fp
 8007240:	9209      	str	r2, [sp, #36]	; 0x24
 8007242:	f89a 3000 	ldrb.w	r3, [sl]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80a1 	beq.w	800738e <_svfiprintf_r+0x1c6>
 800724c:	2300      	movs	r3, #0
 800724e:	f04f 32ff 	mov.w	r2, #4294967295
 8007252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007256:	f10a 0a01 	add.w	sl, sl, #1
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	9307      	str	r3, [sp, #28]
 800725e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007262:	931a      	str	r3, [sp, #104]	; 0x68
 8007264:	4654      	mov	r4, sl
 8007266:	2205      	movs	r2, #5
 8007268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726c:	4850      	ldr	r0, [pc, #320]	; (80073b0 <_svfiprintf_r+0x1e8>)
 800726e:	f7f8 ffaf 	bl	80001d0 <memchr>
 8007272:	9a04      	ldr	r2, [sp, #16]
 8007274:	b9d8      	cbnz	r0, 80072ae <_svfiprintf_r+0xe6>
 8007276:	06d0      	lsls	r0, r2, #27
 8007278:	bf44      	itt	mi
 800727a:	2320      	movmi	r3, #32
 800727c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007280:	0711      	lsls	r1, r2, #28
 8007282:	bf44      	itt	mi
 8007284:	232b      	movmi	r3, #43	; 0x2b
 8007286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728a:	f89a 3000 	ldrb.w	r3, [sl]
 800728e:	2b2a      	cmp	r3, #42	; 0x2a
 8007290:	d015      	beq.n	80072be <_svfiprintf_r+0xf6>
 8007292:	9a07      	ldr	r2, [sp, #28]
 8007294:	4654      	mov	r4, sl
 8007296:	2000      	movs	r0, #0
 8007298:	f04f 0c0a 	mov.w	ip, #10
 800729c:	4621      	mov	r1, r4
 800729e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a2:	3b30      	subs	r3, #48	; 0x30
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d94d      	bls.n	8007344 <_svfiprintf_r+0x17c>
 80072a8:	b1b0      	cbz	r0, 80072d8 <_svfiprintf_r+0x110>
 80072aa:	9207      	str	r2, [sp, #28]
 80072ac:	e014      	b.n	80072d8 <_svfiprintf_r+0x110>
 80072ae:	eba0 0308 	sub.w	r3, r0, r8
 80072b2:	fa09 f303 	lsl.w	r3, r9, r3
 80072b6:	4313      	orrs	r3, r2
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	46a2      	mov	sl, r4
 80072bc:	e7d2      	b.n	8007264 <_svfiprintf_r+0x9c>
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	1d19      	adds	r1, r3, #4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	9103      	str	r1, [sp, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfbb      	ittet	lt
 80072ca:	425b      	neglt	r3, r3
 80072cc:	f042 0202 	orrlt.w	r2, r2, #2
 80072d0:	9307      	strge	r3, [sp, #28]
 80072d2:	9307      	strlt	r3, [sp, #28]
 80072d4:	bfb8      	it	lt
 80072d6:	9204      	strlt	r2, [sp, #16]
 80072d8:	7823      	ldrb	r3, [r4, #0]
 80072da:	2b2e      	cmp	r3, #46	; 0x2e
 80072dc:	d10c      	bne.n	80072f8 <_svfiprintf_r+0x130>
 80072de:	7863      	ldrb	r3, [r4, #1]
 80072e0:	2b2a      	cmp	r3, #42	; 0x2a
 80072e2:	d134      	bne.n	800734e <_svfiprintf_r+0x186>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9203      	str	r2, [sp, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bfb8      	it	lt
 80072f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f4:	3402      	adds	r4, #2
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80073c0 <_svfiprintf_r+0x1f8>
 80072fc:	7821      	ldrb	r1, [r4, #0]
 80072fe:	2203      	movs	r2, #3
 8007300:	4650      	mov	r0, sl
 8007302:	f7f8 ff65 	bl	80001d0 <memchr>
 8007306:	b138      	cbz	r0, 8007318 <_svfiprintf_r+0x150>
 8007308:	9b04      	ldr	r3, [sp, #16]
 800730a:	eba0 000a 	sub.w	r0, r0, sl
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	4082      	lsls	r2, r0
 8007312:	4313      	orrs	r3, r2
 8007314:	3401      	adds	r4, #1
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731c:	4825      	ldr	r0, [pc, #148]	; (80073b4 <_svfiprintf_r+0x1ec>)
 800731e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007322:	2206      	movs	r2, #6
 8007324:	f7f8 ff54 	bl	80001d0 <memchr>
 8007328:	2800      	cmp	r0, #0
 800732a:	d038      	beq.n	800739e <_svfiprintf_r+0x1d6>
 800732c:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <_svfiprintf_r+0x1f0>)
 800732e:	bb1b      	cbnz	r3, 8007378 <_svfiprintf_r+0x1b0>
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	3307      	adds	r3, #7
 8007334:	f023 0307 	bic.w	r3, r3, #7
 8007338:	3308      	adds	r3, #8
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733e:	4433      	add	r3, r6
 8007340:	9309      	str	r3, [sp, #36]	; 0x24
 8007342:	e768      	b.n	8007216 <_svfiprintf_r+0x4e>
 8007344:	fb0c 3202 	mla	r2, ip, r2, r3
 8007348:	460c      	mov	r4, r1
 800734a:	2001      	movs	r0, #1
 800734c:	e7a6      	b.n	800729c <_svfiprintf_r+0xd4>
 800734e:	2300      	movs	r3, #0
 8007350:	3401      	adds	r4, #1
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	4619      	mov	r1, r3
 8007356:	f04f 0c0a 	mov.w	ip, #10
 800735a:	4620      	mov	r0, r4
 800735c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007360:	3a30      	subs	r2, #48	; 0x30
 8007362:	2a09      	cmp	r2, #9
 8007364:	d903      	bls.n	800736e <_svfiprintf_r+0x1a6>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0c6      	beq.n	80072f8 <_svfiprintf_r+0x130>
 800736a:	9105      	str	r1, [sp, #20]
 800736c:	e7c4      	b.n	80072f8 <_svfiprintf_r+0x130>
 800736e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007372:	4604      	mov	r4, r0
 8007374:	2301      	movs	r3, #1
 8007376:	e7f0      	b.n	800735a <_svfiprintf_r+0x192>
 8007378:	ab03      	add	r3, sp, #12
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	462a      	mov	r2, r5
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <_svfiprintf_r+0x1f4>)
 8007380:	a904      	add	r1, sp, #16
 8007382:	4638      	mov	r0, r7
 8007384:	f3af 8000 	nop.w
 8007388:	1c42      	adds	r2, r0, #1
 800738a:	4606      	mov	r6, r0
 800738c:	d1d6      	bne.n	800733c <_svfiprintf_r+0x174>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	065b      	lsls	r3, r3, #25
 8007392:	f53f af2d 	bmi.w	80071f0 <_svfiprintf_r+0x28>
 8007396:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007398:	b01d      	add	sp, #116	; 0x74
 800739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739e:	ab03      	add	r3, sp, #12
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	462a      	mov	r2, r5
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <_svfiprintf_r+0x1f4>)
 80073a6:	a904      	add	r1, sp, #16
 80073a8:	4638      	mov	r0, r7
 80073aa:	f000 f879 	bl	80074a0 <_printf_i>
 80073ae:	e7eb      	b.n	8007388 <_svfiprintf_r+0x1c0>
 80073b0:	08008c34 	.word	0x08008c34
 80073b4:	08008c3e 	.word	0x08008c3e
 80073b8:	00000000 	.word	0x00000000
 80073bc:	08007115 	.word	0x08007115
 80073c0:	08008c3a 	.word	0x08008c3a

080073c4 <_printf_common>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	4616      	mov	r6, r2
 80073ca:	4699      	mov	r9, r3
 80073cc:	688a      	ldr	r2, [r1, #8]
 80073ce:	690b      	ldr	r3, [r1, #16]
 80073d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073d4:	4293      	cmp	r3, r2
 80073d6:	bfb8      	it	lt
 80073d8:	4613      	movlt	r3, r2
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073e0:	4607      	mov	r7, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b10a      	cbz	r2, 80073ea <_printf_common+0x26>
 80073e6:	3301      	adds	r3, #1
 80073e8:	6033      	str	r3, [r6, #0]
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	0699      	lsls	r1, r3, #26
 80073ee:	bf42      	ittt	mi
 80073f0:	6833      	ldrmi	r3, [r6, #0]
 80073f2:	3302      	addmi	r3, #2
 80073f4:	6033      	strmi	r3, [r6, #0]
 80073f6:	6825      	ldr	r5, [r4, #0]
 80073f8:	f015 0506 	ands.w	r5, r5, #6
 80073fc:	d106      	bne.n	800740c <_printf_common+0x48>
 80073fe:	f104 0a19 	add.w	sl, r4, #25
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	6832      	ldr	r2, [r6, #0]
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	42ab      	cmp	r3, r5
 800740a:	dc26      	bgt.n	800745a <_printf_common+0x96>
 800740c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007410:	1e13      	subs	r3, r2, #0
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	bf18      	it	ne
 8007416:	2301      	movne	r3, #1
 8007418:	0692      	lsls	r2, r2, #26
 800741a:	d42b      	bmi.n	8007474 <_printf_common+0xb0>
 800741c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007420:	4649      	mov	r1, r9
 8007422:	4638      	mov	r0, r7
 8007424:	47c0      	blx	r8
 8007426:	3001      	adds	r0, #1
 8007428:	d01e      	beq.n	8007468 <_printf_common+0xa4>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	6922      	ldr	r2, [r4, #16]
 800742e:	f003 0306 	and.w	r3, r3, #6
 8007432:	2b04      	cmp	r3, #4
 8007434:	bf02      	ittt	eq
 8007436:	68e5      	ldreq	r5, [r4, #12]
 8007438:	6833      	ldreq	r3, [r6, #0]
 800743a:	1aed      	subeq	r5, r5, r3
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	bf0c      	ite	eq
 8007440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007444:	2500      	movne	r5, #0
 8007446:	4293      	cmp	r3, r2
 8007448:	bfc4      	itt	gt
 800744a:	1a9b      	subgt	r3, r3, r2
 800744c:	18ed      	addgt	r5, r5, r3
 800744e:	2600      	movs	r6, #0
 8007450:	341a      	adds	r4, #26
 8007452:	42b5      	cmp	r5, r6
 8007454:	d11a      	bne.n	800748c <_printf_common+0xc8>
 8007456:	2000      	movs	r0, #0
 8007458:	e008      	b.n	800746c <_printf_common+0xa8>
 800745a:	2301      	movs	r3, #1
 800745c:	4652      	mov	r2, sl
 800745e:	4649      	mov	r1, r9
 8007460:	4638      	mov	r0, r7
 8007462:	47c0      	blx	r8
 8007464:	3001      	adds	r0, #1
 8007466:	d103      	bne.n	8007470 <_printf_common+0xac>
 8007468:	f04f 30ff 	mov.w	r0, #4294967295
 800746c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007470:	3501      	adds	r5, #1
 8007472:	e7c6      	b.n	8007402 <_printf_common+0x3e>
 8007474:	18e1      	adds	r1, r4, r3
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	2030      	movs	r0, #48	; 0x30
 800747a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800747e:	4422      	add	r2, r4
 8007480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007488:	3302      	adds	r3, #2
 800748a:	e7c7      	b.n	800741c <_printf_common+0x58>
 800748c:	2301      	movs	r3, #1
 800748e:	4622      	mov	r2, r4
 8007490:	4649      	mov	r1, r9
 8007492:	4638      	mov	r0, r7
 8007494:	47c0      	blx	r8
 8007496:	3001      	adds	r0, #1
 8007498:	d0e6      	beq.n	8007468 <_printf_common+0xa4>
 800749a:	3601      	adds	r6, #1
 800749c:	e7d9      	b.n	8007452 <_printf_common+0x8e>
	...

080074a0 <_printf_i>:
 80074a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	7e0f      	ldrb	r7, [r1, #24]
 80074a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074a8:	2f78      	cmp	r7, #120	; 0x78
 80074aa:	4691      	mov	r9, r2
 80074ac:	4680      	mov	r8, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	469a      	mov	sl, r3
 80074b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074b6:	d807      	bhi.n	80074c8 <_printf_i+0x28>
 80074b8:	2f62      	cmp	r7, #98	; 0x62
 80074ba:	d80a      	bhi.n	80074d2 <_printf_i+0x32>
 80074bc:	2f00      	cmp	r7, #0
 80074be:	f000 80d4 	beq.w	800766a <_printf_i+0x1ca>
 80074c2:	2f58      	cmp	r7, #88	; 0x58
 80074c4:	f000 80c0 	beq.w	8007648 <_printf_i+0x1a8>
 80074c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074d0:	e03a      	b.n	8007548 <_printf_i+0xa8>
 80074d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074d6:	2b15      	cmp	r3, #21
 80074d8:	d8f6      	bhi.n	80074c8 <_printf_i+0x28>
 80074da:	a101      	add	r1, pc, #4	; (adr r1, 80074e0 <_printf_i+0x40>)
 80074dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e0:	08007539 	.word	0x08007539
 80074e4:	0800754d 	.word	0x0800754d
 80074e8:	080074c9 	.word	0x080074c9
 80074ec:	080074c9 	.word	0x080074c9
 80074f0:	080074c9 	.word	0x080074c9
 80074f4:	080074c9 	.word	0x080074c9
 80074f8:	0800754d 	.word	0x0800754d
 80074fc:	080074c9 	.word	0x080074c9
 8007500:	080074c9 	.word	0x080074c9
 8007504:	080074c9 	.word	0x080074c9
 8007508:	080074c9 	.word	0x080074c9
 800750c:	08007651 	.word	0x08007651
 8007510:	08007579 	.word	0x08007579
 8007514:	0800760b 	.word	0x0800760b
 8007518:	080074c9 	.word	0x080074c9
 800751c:	080074c9 	.word	0x080074c9
 8007520:	08007673 	.word	0x08007673
 8007524:	080074c9 	.word	0x080074c9
 8007528:	08007579 	.word	0x08007579
 800752c:	080074c9 	.word	0x080074c9
 8007530:	080074c9 	.word	0x080074c9
 8007534:	08007613 	.word	0x08007613
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	1d1a      	adds	r2, r3, #4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	602a      	str	r2, [r5, #0]
 8007540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007548:	2301      	movs	r3, #1
 800754a:	e09f      	b.n	800768c <_printf_i+0x1ec>
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	0607      	lsls	r7, r0, #24
 8007552:	f103 0104 	add.w	r1, r3, #4
 8007556:	6029      	str	r1, [r5, #0]
 8007558:	d501      	bpl.n	800755e <_printf_i+0xbe>
 800755a:	681e      	ldr	r6, [r3, #0]
 800755c:	e003      	b.n	8007566 <_printf_i+0xc6>
 800755e:	0646      	lsls	r6, r0, #25
 8007560:	d5fb      	bpl.n	800755a <_printf_i+0xba>
 8007562:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007566:	2e00      	cmp	r6, #0
 8007568:	da03      	bge.n	8007572 <_printf_i+0xd2>
 800756a:	232d      	movs	r3, #45	; 0x2d
 800756c:	4276      	negs	r6, r6
 800756e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007572:	485a      	ldr	r0, [pc, #360]	; (80076dc <_printf_i+0x23c>)
 8007574:	230a      	movs	r3, #10
 8007576:	e012      	b.n	800759e <_printf_i+0xfe>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	6820      	ldr	r0, [r4, #0]
 800757c:	1d19      	adds	r1, r3, #4
 800757e:	6029      	str	r1, [r5, #0]
 8007580:	0605      	lsls	r5, r0, #24
 8007582:	d501      	bpl.n	8007588 <_printf_i+0xe8>
 8007584:	681e      	ldr	r6, [r3, #0]
 8007586:	e002      	b.n	800758e <_printf_i+0xee>
 8007588:	0641      	lsls	r1, r0, #25
 800758a:	d5fb      	bpl.n	8007584 <_printf_i+0xe4>
 800758c:	881e      	ldrh	r6, [r3, #0]
 800758e:	4853      	ldr	r0, [pc, #332]	; (80076dc <_printf_i+0x23c>)
 8007590:	2f6f      	cmp	r7, #111	; 0x6f
 8007592:	bf0c      	ite	eq
 8007594:	2308      	moveq	r3, #8
 8007596:	230a      	movne	r3, #10
 8007598:	2100      	movs	r1, #0
 800759a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800759e:	6865      	ldr	r5, [r4, #4]
 80075a0:	60a5      	str	r5, [r4, #8]
 80075a2:	2d00      	cmp	r5, #0
 80075a4:	bfa2      	ittt	ge
 80075a6:	6821      	ldrge	r1, [r4, #0]
 80075a8:	f021 0104 	bicge.w	r1, r1, #4
 80075ac:	6021      	strge	r1, [r4, #0]
 80075ae:	b90e      	cbnz	r6, 80075b4 <_printf_i+0x114>
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	d04b      	beq.n	800764c <_printf_i+0x1ac>
 80075b4:	4615      	mov	r5, r2
 80075b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ba:	fb03 6711 	mls	r7, r3, r1, r6
 80075be:	5dc7      	ldrb	r7, [r0, r7]
 80075c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075c4:	4637      	mov	r7, r6
 80075c6:	42bb      	cmp	r3, r7
 80075c8:	460e      	mov	r6, r1
 80075ca:	d9f4      	bls.n	80075b6 <_printf_i+0x116>
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d10b      	bne.n	80075e8 <_printf_i+0x148>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	07de      	lsls	r6, r3, #31
 80075d4:	d508      	bpl.n	80075e8 <_printf_i+0x148>
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	6861      	ldr	r1, [r4, #4]
 80075da:	4299      	cmp	r1, r3
 80075dc:	bfde      	ittt	le
 80075de:	2330      	movle	r3, #48	; 0x30
 80075e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075e8:	1b52      	subs	r2, r2, r5
 80075ea:	6122      	str	r2, [r4, #16]
 80075ec:	f8cd a000 	str.w	sl, [sp]
 80075f0:	464b      	mov	r3, r9
 80075f2:	aa03      	add	r2, sp, #12
 80075f4:	4621      	mov	r1, r4
 80075f6:	4640      	mov	r0, r8
 80075f8:	f7ff fee4 	bl	80073c4 <_printf_common>
 80075fc:	3001      	adds	r0, #1
 80075fe:	d14a      	bne.n	8007696 <_printf_i+0x1f6>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	b004      	add	sp, #16
 8007606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	f043 0320 	orr.w	r3, r3, #32
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	4833      	ldr	r0, [pc, #204]	; (80076e0 <_printf_i+0x240>)
 8007614:	2778      	movs	r7, #120	; 0x78
 8007616:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	061f      	lsls	r7, r3, #24
 8007620:	f851 6b04 	ldr.w	r6, [r1], #4
 8007624:	d402      	bmi.n	800762c <_printf_i+0x18c>
 8007626:	065f      	lsls	r7, r3, #25
 8007628:	bf48      	it	mi
 800762a:	b2b6      	uxthmi	r6, r6
 800762c:	07df      	lsls	r7, r3, #31
 800762e:	bf48      	it	mi
 8007630:	f043 0320 	orrmi.w	r3, r3, #32
 8007634:	6029      	str	r1, [r5, #0]
 8007636:	bf48      	it	mi
 8007638:	6023      	strmi	r3, [r4, #0]
 800763a:	b91e      	cbnz	r6, 8007644 <_printf_i+0x1a4>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	f023 0320 	bic.w	r3, r3, #32
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	2310      	movs	r3, #16
 8007646:	e7a7      	b.n	8007598 <_printf_i+0xf8>
 8007648:	4824      	ldr	r0, [pc, #144]	; (80076dc <_printf_i+0x23c>)
 800764a:	e7e4      	b.n	8007616 <_printf_i+0x176>
 800764c:	4615      	mov	r5, r2
 800764e:	e7bd      	b.n	80075cc <_printf_i+0x12c>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	6826      	ldr	r6, [r4, #0]
 8007654:	6961      	ldr	r1, [r4, #20]
 8007656:	1d18      	adds	r0, r3, #4
 8007658:	6028      	str	r0, [r5, #0]
 800765a:	0635      	lsls	r5, r6, #24
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	d501      	bpl.n	8007664 <_printf_i+0x1c4>
 8007660:	6019      	str	r1, [r3, #0]
 8007662:	e002      	b.n	800766a <_printf_i+0x1ca>
 8007664:	0670      	lsls	r0, r6, #25
 8007666:	d5fb      	bpl.n	8007660 <_printf_i+0x1c0>
 8007668:	8019      	strh	r1, [r3, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	4615      	mov	r5, r2
 8007670:	e7bc      	b.n	80075ec <_printf_i+0x14c>
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	1d1a      	adds	r2, r3, #4
 8007676:	602a      	str	r2, [r5, #0]
 8007678:	681d      	ldr	r5, [r3, #0]
 800767a:	6862      	ldr	r2, [r4, #4]
 800767c:	2100      	movs	r1, #0
 800767e:	4628      	mov	r0, r5
 8007680:	f7f8 fda6 	bl	80001d0 <memchr>
 8007684:	b108      	cbz	r0, 800768a <_printf_i+0x1ea>
 8007686:	1b40      	subs	r0, r0, r5
 8007688:	6060      	str	r0, [r4, #4]
 800768a:	6863      	ldr	r3, [r4, #4]
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	2300      	movs	r3, #0
 8007690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007694:	e7aa      	b.n	80075ec <_printf_i+0x14c>
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	462a      	mov	r2, r5
 800769a:	4649      	mov	r1, r9
 800769c:	4640      	mov	r0, r8
 800769e:	47d0      	blx	sl
 80076a0:	3001      	adds	r0, #1
 80076a2:	d0ad      	beq.n	8007600 <_printf_i+0x160>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	079b      	lsls	r3, r3, #30
 80076a8:	d413      	bmi.n	80076d2 <_printf_i+0x232>
 80076aa:	68e0      	ldr	r0, [r4, #12]
 80076ac:	9b03      	ldr	r3, [sp, #12]
 80076ae:	4298      	cmp	r0, r3
 80076b0:	bfb8      	it	lt
 80076b2:	4618      	movlt	r0, r3
 80076b4:	e7a6      	b.n	8007604 <_printf_i+0x164>
 80076b6:	2301      	movs	r3, #1
 80076b8:	4632      	mov	r2, r6
 80076ba:	4649      	mov	r1, r9
 80076bc:	4640      	mov	r0, r8
 80076be:	47d0      	blx	sl
 80076c0:	3001      	adds	r0, #1
 80076c2:	d09d      	beq.n	8007600 <_printf_i+0x160>
 80076c4:	3501      	adds	r5, #1
 80076c6:	68e3      	ldr	r3, [r4, #12]
 80076c8:	9903      	ldr	r1, [sp, #12]
 80076ca:	1a5b      	subs	r3, r3, r1
 80076cc:	42ab      	cmp	r3, r5
 80076ce:	dcf2      	bgt.n	80076b6 <_printf_i+0x216>
 80076d0:	e7eb      	b.n	80076aa <_printf_i+0x20a>
 80076d2:	2500      	movs	r5, #0
 80076d4:	f104 0619 	add.w	r6, r4, #25
 80076d8:	e7f5      	b.n	80076c6 <_printf_i+0x226>
 80076da:	bf00      	nop
 80076dc:	08008c45 	.word	0x08008c45
 80076e0:	08008c56 	.word	0x08008c56

080076e4 <_sbrk_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4d06      	ldr	r5, [pc, #24]	; (8007700 <_sbrk_r+0x1c>)
 80076e8:	2300      	movs	r3, #0
 80076ea:	4604      	mov	r4, r0
 80076ec:	4608      	mov	r0, r1
 80076ee:	602b      	str	r3, [r5, #0]
 80076f0:	f7f9 fcfc 	bl	80010ec <_sbrk>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d102      	bne.n	80076fe <_sbrk_r+0x1a>
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	b103      	cbz	r3, 80076fe <_sbrk_r+0x1a>
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	20001f78 	.word	0x20001f78

08007704 <_realloc_r>:
 8007704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007708:	4680      	mov	r8, r0
 800770a:	4614      	mov	r4, r2
 800770c:	460e      	mov	r6, r1
 800770e:	b921      	cbnz	r1, 800771a <_realloc_r+0x16>
 8007710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007714:	4611      	mov	r1, r2
 8007716:	f7ff bc71 	b.w	8006ffc <_malloc_r>
 800771a:	b92a      	cbnz	r2, 8007728 <_realloc_r+0x24>
 800771c:	f7ff fc02 	bl	8006f24 <_free_r>
 8007720:	4625      	mov	r5, r4
 8007722:	4628      	mov	r0, r5
 8007724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007728:	f000 f81b 	bl	8007762 <_malloc_usable_size_r>
 800772c:	4284      	cmp	r4, r0
 800772e:	4607      	mov	r7, r0
 8007730:	d802      	bhi.n	8007738 <_realloc_r+0x34>
 8007732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007736:	d812      	bhi.n	800775e <_realloc_r+0x5a>
 8007738:	4621      	mov	r1, r4
 800773a:	4640      	mov	r0, r8
 800773c:	f7ff fc5e 	bl	8006ffc <_malloc_r>
 8007740:	4605      	mov	r5, r0
 8007742:	2800      	cmp	r0, #0
 8007744:	d0ed      	beq.n	8007722 <_realloc_r+0x1e>
 8007746:	42bc      	cmp	r4, r7
 8007748:	4622      	mov	r2, r4
 800774a:	4631      	mov	r1, r6
 800774c:	bf28      	it	cs
 800774e:	463a      	movcs	r2, r7
 8007750:	f7ff fbda 	bl	8006f08 <memcpy>
 8007754:	4631      	mov	r1, r6
 8007756:	4640      	mov	r0, r8
 8007758:	f7ff fbe4 	bl	8006f24 <_free_r>
 800775c:	e7e1      	b.n	8007722 <_realloc_r+0x1e>
 800775e:	4635      	mov	r5, r6
 8007760:	e7df      	b.n	8007722 <_realloc_r+0x1e>

08007762 <_malloc_usable_size_r>:
 8007762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007766:	1f18      	subs	r0, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	bfbc      	itt	lt
 800776c:	580b      	ldrlt	r3, [r1, r0]
 800776e:	18c0      	addlt	r0, r0, r3
 8007770:	4770      	bx	lr
	...

08007774 <_init>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr

08007780 <_fini>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr
